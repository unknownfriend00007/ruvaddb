id: moduleContainer
parentSlotId: '2'
definitionId: customReactApp
styles:
  xl:
    gridItem:
      x: 0
      y: 0
      w: 24
      h: 40
properties:
  name: moduleContainer
  heightMode: auto
  margin: false
  fileSystem:
    app/app.tsx: |
      import React, { useState, useEffect } from 'react';
      import { useToast } from '@/hooks/use-toast';
      import { Toaster } from '@/components/ui/toaster';
      import { useLoadAction, useMutateAction } from '@uibakery/data';
      import ShoppingInterface from '@/components/ShoppingInterface';
      import SafetyDashboard from '@/components/SafetyDashboard';
      import AuthDialog from '@/components/AuthDialog';
      import SettingsPage from '@/components/SettingsPage';
      import getUserByDeviceIdAction from '@/actions/getUserByDeviceId';
      import createUserAction from '@/actions/createUser';
      import { getDeviceId, hashPin } from '@/lib/auth';
      import { getAppSettings, saveAppSettings } from '@/lib/storage';

      type AppView = 'shopping' | 'safety' | 'settings';

      function App() {
        const { toast } = useToast();
        const [currentView, setCurrentView] = useState<AppView>('shopping');
        const [showAuthDialog, setShowAuthDialog] = useState(false);
        const [deviceId] = useState(() => getDeviceId());
        const [currentUser, setCurrentUser] = useState<any>(null);

        // Load user data
        const [userData, loadingUser, userError, refreshUser] = useLoadAction(getUserByDeviceIdAction, [], { deviceId });
        const [createUser] = useMutateAction(createUserAction);

        useEffect(() => {
          if (userData && userData.length > 0) {
            setCurrentUser(userData[0]);
          } else if (!loadingUser && !userError) {
            // Create new user if doesn't exist
            initializeNewUser();
          }
        }, [userData, loadingUser, userError]);

        const initializeNewUser = async () => {
          try {
            const settings = getAppSettings();
            await createUser({
              deviceId,
              secretCode: settings.secretCode,
              pinHash: null
            });
            await refreshUser();
            toast({
              title: "Welcome to QuickMart",
              description: "Your shopping app is ready to use!",
            });
          } catch (error) {
            console.error('Failed to create user:', error);
            toast({
              title: "Setup Error",
              description: "Failed to initialize app. Please try again.",
              variant: "destructive"
            });
          }
        };

        const handleSecretCodeEntered = () => {
          if (!currentUser) return;

          // Check if PIN is set
          if (currentUser.pin_hash) {
            setShowAuthDialog(true);
          } else {
            setCurrentView('safety');
          }
        };

        const handleAuthenticated = () => {
          const context = localStorage.getItem('auth_context');
          if (context === 'settings') {
            handleAuthenticatedForSettings();
          } else {
            setShowAuthDialog(false);
            setCurrentView('safety');
          }
        };

        const handleQuickExit = () => {
          setCurrentView('shopping');
          
          // Open Google to maintain disguise
          const googleWindow = window.open('https://www.google.com', '_blank');
          
          // Also show shopping interface
          toast({
            description: "Returned to shopping mode",
          });
        };

        const handleOpenSettings = () => {
          if (currentUser?.pin_hash) {
            // Set context for authentication
            localStorage.setItem('auth_context', 'settings');
            setShowAuthDialog(true);
          } else {
            setCurrentView('settings');
          }
        };

        const handleAuthenticatedForSettings = () => {
          setShowAuthDialog(false);
          const context = localStorage.getItem('auth_context');
          if (context === 'settings') {
            setCurrentView('settings');
          } else {
            setCurrentView('safety');
          }
          localStorage.removeItem('auth_context');
        };

        if (loadingUser) {
          return (
            <div className="min-h-screen flex items-center justify-center">
              <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading QuickMart...</p>
              </div>
            </div>
          );
        }

        return (
          <>
            {currentView === 'shopping' && (
              <ShoppingInterface 
                onSecretCodeEntered={handleSecretCodeEntered}
                onOpenSettings={handleOpenSettings}
              />
            )}

            {currentView === 'safety' && (
              <SafetyDashboard 
                onQuickExit={handleQuickExit}
                onOpenSettings={handleOpenSettings}
                currentUser={currentUser}
              />
            )}

            {currentView === 'settings' && (
              <SettingsPage
                onBack={() => setCurrentView(currentView === 'settings' && localStorage.getItem('auth_context') === 'settings' ? 'safety' : 'shopping')}
                currentUser={currentUser}
                onUserUpdated={refreshUser}
              />
            )}

            {showAuthDialog && currentUser?.pin_hash && (
              <AuthDialog
                isOpen={showAuthDialog}
                onAuthenticated={handleAuthenticated}
                userPinHash={currentUser.pin_hash}
                title="Security Check"
                description="Please enter your PIN to access safety features"
              />
            )}

            <Toaster />
          </>
        );
      }

      export default App;
    components/ui/button.tsx: |+

      import * as React from "react"
      import { Slot } from "@radix-ui/react-slot"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const buttonVariants = cva(
        "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
        {
          variants: {
            variant: {
              default:
                "bg-primary text-primary-foreground shadow hover:bg-primary/90",
              destructive:
                "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
              outline:
                "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
              secondary:
                "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
              ghost: "hover:bg-accent hover:text-accent-foreground",
              link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
              default: "h-9 px-4 py-2",
              sm: "h-8 rounded-md px-3 text-xs",
              lg: "h-10 rounded-md px-8",
              icon: "h-9 w-9",
            },
          },
          defaultVariants: {
            variant: "default",
            size: "default",
          },
        }
      )

      export interface ButtonProps
        extends React.ButtonHTMLAttributes<HTMLButtonElement>,
          VariantProps<typeof buttonVariants> {
        asChild?: boolean
      }

      const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
        ({ className, variant, size, asChild = false, ...props }, ref) => {
          const Comp = asChild ? Slot : "button"
          return (
            <Comp
              className={cn(buttonVariants({ variant, size, className }))}
              ref={ref}
              {...props}
            />
          )
        }
      )
      Button.displayName = "Button"

      export { Button, buttonVariants }


    components/ui/card.tsx: >+
      import * as React from "react"


      import { cn } from "@/lib/utils"


      const Card = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn(
            "rounded-lg border bg-card text-card-foreground shadow-sm",
            className,
          )}
          {...props}
        />
      ))

      Card.displayName = "Card"


      const CardHeader = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn("flex flex-col space-y-1.5 p-6", className)}
          {...props}
        />
      ))

      CardHeader.displayName = "CardHeader"


      const CardTitle = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLHeadingElement>
      >(({ className, ...props }, ref) => (
        <h3
          ref={ref}
          className={cn(
            "text-2xl font-semibold leading-none tracking-tight",
            className,
          )}
          {...props}
        />
      ))

      CardTitle.displayName = "CardTitle"


      const CardDescription = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLParagraphElement>
      >(({ className, ...props }, ref) => (
        <p
          ref={ref}
          className={cn("text-sm text-muted-foreground", className)}
          {...props}
        />
      ))

      CardDescription.displayName = "CardDescription"


      const CardContent = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
      ))

      CardContent.displayName = "CardContent"


      const CardFooter = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn("flex items-center p-6 pt-0", className)}
          {...props}
        />
      ))

      CardFooter.displayName = "CardFooter"


      export { Card, CardHeader, CardFooter, CardTitle, CardDescription,
      CardContent }

    lib/utils.ts: |
      import { clsx, type ClassValue } from 'clsx';
      import { twMerge } from 'tailwind-merge';

      export function cn(...inputs: ClassValue[]) {
        return twMerge(clsx(inputs));
      }
    package.json: |
      {
        "name": "uib-module",
        "packageManager": "bun",
        "private": true,
        "version": "0.0.0",
        "type": "module",
        "scripts": {
          "lint": "eslint ."
        },
        "dependencies": {
          "@hookform/resolvers": "^5.2.2",
          "@radix-ui/react-dialog": "^1.1.15",
          "@radix-ui/react-icons": "1.3.0",
          "@radix-ui/react-label": "^2.1.7",
          "@radix-ui/react-separator": "^1.1.7",
          "@radix-ui/react-slot": "^1.2.3",
          "@radix-ui/react-toast": "^1.2.15",
          "@uibakery/data": "0.0.8",
          "canvas-confetti": "1.9.3",
          "class-variance-authority": "0.7.0",
          "clsx": "2.1.1",
          "lucide-react": "0.446.0",
          "react": "18.3.1",
          "react-day-picker": "^9.7.0",
          "react-dom": "18.3.1",
          "react-hook-form": "^7.63.0",
          "react-icons": "~5.5.0",
          "tailwind-merge": "2.5.2",
          "zod": "^4.1.11"
        },
        "devDependencies": {
          "@eslint/js": "9.11.1",
          "@types/node": "22.7.3",
          "@types/react": "18.3.9",
          "@types/react-dom": "18.3.0",
          "autoprefixer": "10.4.20",
          "eslint": "9.11.1",
          "eslint-plugin-react-hooks": "5.1.0-rc.0",
          "eslint-plugin-react-refresh": "0.4.12",
          "globals": "15.9.0",
          "postcss": "8.4.47",
          "tailwindcss": "3.4.13",
          "typescript": "5.5.3",
          "typescript-eslint": "8.7.0"
        }
      }
    initial.md: >
      # Requirements

      ## Summary

      QuickMart is a stealth women's safety app disguised as a shopping
      application. The app appears as a normal shopping interface with search
      functionality, but when users enter a secret code (#5555), it unlocks a
      comprehensive SOS dashboard with emergency features, location tracking,
      contact management, and instant help options. The app provides critical
      safety tools while maintaining complete discretion.


      ## Use cases

      - **Shopping Interface & Secret Access**
        1) User opens app and sees normal shopping interface with search bar
        2) User can search for products and browse results in embedded view
        3) User enters secret code (#5555) in search bar to unlock safety dashboard
        4) System authenticates with PIN/password if configured
        5) User accesses SOS features while maintaining shopping app disguise

      - **SOS Emergency Response**
        1) User presses large SOS button on safety dashboard
        2) System captures current GPS location automatically
        3) System opens camera for photo evidence collection
        4) System records 10-second video evidence
        5) System sends emergency messages via WhatsApp/SMS/Email with location
        6) System uploads all evidence to secure cloud storage
        7) User can quick-exit to shopping interface instantly

      - **Emergency Contacts & Settings Management**
        1) User manages up to 3 phone numbers and 2 email addresses
        2) User customizes secret code and sets authentication PIN
        3) User configures background location tracking intervals
        4) User sets auto-delete policies for location logs
        5) System provides disguised weekly test notifications

      ## Plan

      ### Shopping Interface & Secret Access

      1. [x] Generate database schema with tables for users, emergency_contacts,
      settings, location_logs, and sos_events

      2. [x] Create main shopping interface with search bar and product results
      embedding

      3. [x] Implement secret code detection and safety dashboard unlock

      4. [x] Add PIN/password authentication system for protected areas

      5. [x] Create quick-exit functionality to instantly return to shopping
      view


      ### SOS Emergency Response

      1. [x] Build SOS dashboard with emergency buttons and current location
      display

      2. [x] Implement GPS location capture using browser geolocation API

      3. [x] Add camera integration for photo and video evidence collection

      4. [x] Create emergency messaging system with WhatsApp/SMS/Email fallbacks

      5. [x] Build file upload system for evidence storage

      6. [x] Add helpline quick-dial buttons (112, 1091, 1098)


      ### Emergency Contacts & Settings Management

      1. [] Create settings page for emergency contacts management

      2. [x] Implement secret code customization and authentication settings

      3. [x] Add background location tracking configuration

      4. [x] Create location history viewer and auto-delete policies

      5. [] Build disguised notification system and testing features
    migrations/1732569891_create_safety_app_schema.sql: >
      -- Migration to create complete schema for QuickMart Safety App

      CREATE TABLE users (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        device_id TEXT NOT NULL UNIQUE,
        secret_code TEXT NOT NULL DEFAULT '#5555',
        pin_hash TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
      );


      CREATE TABLE emergency_contacts (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        contact_type TEXT NOT NULL CHECK (contact_type IN ('phone', 'email')),
        contact_value TEXT NOT NULL,
        is_primary BOOLEAN NOT NULL DEFAULT FALSE,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
      );


      CREATE TABLE settings (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        setting_key TEXT NOT NULL,
        setting_value TEXT NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        UNIQUE(user_id, setting_key)
      );


      CREATE TABLE location_logs (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        latitude NUMERIC(10, 8) NOT NULL,
        longitude NUMERIC(11, 8) NOT NULL,
        accuracy NUMERIC(8, 2),
        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        log_type TEXT NOT NULL DEFAULT 'background' CHECK (log_type IN ('background', 'sos', 'manual'))
      );


      CREATE TABLE sos_events (
        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        latitude NUMERIC(10, 8) NOT NULL,
        longitude NUMERIC(11, 8) NOT NULL,
        accuracy NUMERIC(8, 2),
        photo_url TEXT,
        video_url TEXT,
        location_file_url TEXT,
        messages_sent JSONB DEFAULT '[]',
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
      );


      -- Indexes for better performance

      CREATE INDEX idx_emergency_contacts_user_id ON
      emergency_contacts(user_id);

      CREATE INDEX idx_emergency_contacts_type ON
      emergency_contacts(contact_type);

      CREATE INDEX idx_settings_user_id ON settings(user_id);

      CREATE INDEX idx_settings_key ON settings(setting_key);

      CREATE INDEX idx_location_logs_user_id ON location_logs(user_id);

      CREATE INDEX idx_location_logs_timestamp ON location_logs(timestamp);

      CREATE INDEX idx_sos_events_user_id ON sos_events(user_id);

      CREATE INDEX idx_sos_events_created_at ON sos_events(created_at);
    components/ui/input.tsx: >+
      import * as React from "react"


      import { cn } from "@/lib/utils"


      const Input = React.forwardRef<HTMLInputElement,
      React.ComponentProps<"input">>(
        ({ className, type, ...props }, ref) => {
          return (
            <input
              type={type}
              className={cn(
                "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
                className
              )}
              ref={ref}
              {...props}
            />
          )
        }
      )

      Input.displayName = "Input"


      export { Input }

    components/ui/toast.tsx: |+

      import * as React from "react"
      import * as ToastPrimitives from "@radix-ui/react-toast"
      import { cva, type VariantProps } from "class-variance-authority"
      import { cn } from "@/lib/utils"
      import { Cross2Icon } from "@radix-ui/react-icons"

      const ToastProvider = ToastPrimitives.Provider

      const ToastViewport = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Viewport>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Viewport
          ref={ref}
          className={cn(
            "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
            className
          )}
          {...props}
        />
      ))
      ToastViewport.displayName = ToastPrimitives.Viewport.displayName

      const toastVariants = cva(
        "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
        {
          variants: {
            variant: {
              default: "border bg-background text-foreground",
              destructive:
                "destructive group border-destructive bg-destructive text-destructive-foreground",
            },
          },
          defaultVariants: {
            variant: "default",
          },
        }
      )

      const Toast = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Root>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
          VariantProps<typeof toastVariants>
      >(({ className, variant, ...props }, ref) => {
        return (
          <ToastPrimitives.Root
            ref={ref}
            className={cn(toastVariants({ variant }), className)}
            {...props}
          />
        )
      })
      Toast.displayName = ToastPrimitives.Root.displayName

      const ToastAction = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Action>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Action
          ref={ref}
          className={cn(
            "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
            className
          )}
          {...props}
        />
      ))
      ToastAction.displayName = ToastPrimitives.Action.displayName

      const ToastClose = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Close>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Close
          ref={ref}
          className={cn(
            "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
            className
          )}
          toast-close=""
          {...props}
        >
          <Cross2Icon className="h-4 w-4" />
        </ToastPrimitives.Close>
      ))
      ToastClose.displayName = ToastPrimitives.Close.displayName

      const ToastTitle = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Title>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Title
          ref={ref}
          className={cn("text-sm font-semibold [&+div]:text-xs", className)}
          {...props}
        />
      ))
      ToastTitle.displayName = ToastPrimitives.Title.displayName

      const ToastDescription = React.forwardRef<
        React.ElementRef<typeof ToastPrimitives.Description>,
        React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
      >(({ className, ...props }, ref) => (
        <ToastPrimitives.Description
          ref={ref}
          className={cn("text-sm opacity-90", className)}
          {...props}
        />
      ))
      ToastDescription.displayName = ToastPrimitives.Description.displayName

      type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

      type ToastActionElement = React.ReactElement<typeof ToastAction>

      export {
        type ToastProps,
        type ToastActionElement,
        ToastProvider,
        ToastViewport,
        Toast,
        ToastTitle,
        ToastDescription,
        ToastClose,
        ToastAction,
      }

    hooks/use-toast.ts: |+

      "use client"

      // Inspired by react-hot-toast library
      import * as React from "react"

      import type {
        ToastActionElement,
        ToastProps,
      } from "@/components/ui/toast"

      const TOAST_LIMIT = 1
      const TOAST_REMOVE_DELAY = 1000000

      type ToasterToast = ToastProps & {
        id: string
        title?: React.ReactNode
        description?: React.ReactNode
        action?: ToastActionElement
      }

      const actionTypes = {
        ADD_TOAST: "ADD_TOAST",
        UPDATE_TOAST: "UPDATE_TOAST",
        DISMISS_TOAST: "DISMISS_TOAST",
        REMOVE_TOAST: "REMOVE_TOAST",
      } as const

      let count = 0

      function genId() {
        count = (count + 1) % Number.MAX_SAFE_INTEGER
        return count.toString()
      }

      type ActionType = typeof actionTypes

      type Action =
        | {
            type: ActionType["ADD_TOAST"]
            toast: ToasterToast
          }
        | {
            type: ActionType["UPDATE_TOAST"]
            toast: Partial<ToasterToast>
          }
        | {
            type: ActionType["DISMISS_TOAST"]
            toastId?: ToasterToast["id"]
          }
        | {
            type: ActionType["REMOVE_TOAST"]
            toastId?: ToasterToast["id"]
          }

      interface State {
        toasts: ToasterToast[]
      }

      const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

      const addToRemoveQueue = (toastId: string) => {
        if (toastTimeouts.has(toastId)) {
          return
        }

        const timeout = setTimeout(() => {
          toastTimeouts.delete(toastId)
          dispatch({
            type: "REMOVE_TOAST",
            toastId: toastId,
          })
        }, TOAST_REMOVE_DELAY)

        toastTimeouts.set(toastId, timeout)
      }

      export const reducer = (state: State, action: Action): State => {
        switch (action.type) {
          case "ADD_TOAST":
            return {
              ...state,
              toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
            }

          case "UPDATE_TOAST":
            return {
              ...state,
              toasts: state.toasts.map((t) =>
                t.id === action.toast.id ? { ...t, ...action.toast } : t
              ),
            }

          case "DISMISS_TOAST": {
            const { toastId } = action

            // ! Side effects ! - This could be extracted into a dismissToast() action,
            // but I'll keep it here for simplicity
            if (toastId) {
              addToRemoveQueue(toastId)
            } else {
              state.toasts.forEach((toast) => {
                addToRemoveQueue(toast.id)
              })
            }

            return {
              ...state,
              toasts: state.toasts.map((t) =>
                t.id === toastId || toastId === undefined
                  ? {
                      ...t,
                      open: false,
                    }
                  : t
              ),
            }
          }
          case "REMOVE_TOAST":
            if (action.toastId === undefined) {
              return {
                ...state,
                toasts: [],
              }
            }
            return {
              ...state,
              toasts: state.toasts.filter((t) => t.id !== action.toastId),
            }
        }
      }

      const listeners: Array<(state: State) => void> = []

      let memoryState: State = { toasts: [] }

      function dispatch(action: Action) {
        memoryState = reducer(memoryState, action)
        listeners.forEach((listener) => {
          listener(memoryState)
        })
      }

      type Toast = Omit<ToasterToast, "id">

      function toast({ ...props }: Toast) {
        const id = genId()

        const update = (props: ToasterToast) =>
          dispatch({
            type: "UPDATE_TOAST",
            toast: { ...props, id },
          })
        const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

        dispatch({
          type: "ADD_TOAST",
          toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open) => {
              if (!open) dismiss()
            },
          },
        })

        return {
          id: id,
          dismiss,
          update,
        }
      }

      function useToast() {
        const [state, setState] = React.useState<State>(memoryState)

        React.useEffect(() => {
          listeners.push(setState)
          return () => {
            const index = listeners.indexOf(setState)
            if (index > -1) {
              listeners.splice(index, 1)
            }
          }
        }, [state])

        return {
          ...state,
          toast,
          dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
        }
      }

      export { useToast, toast }

    components/ui/toaster.tsx: |+

      import { useToast } from "@/hooks/use-toast"
      import {
        Toast,
        ToastClose,
        ToastDescription,
        ToastProvider,
        ToastTitle,
        ToastViewport,
      } from "@/components/ui/toast"

      export function Toaster() {
        const { toasts } = useToast()

        return (
          <ToastProvider>
            {toasts.map(function ({ id, title, description, action, ...props }) {
              return (
                <Toast key={id} {...props}>
                  <div className="grid gap-1">
                    {title && <ToastTitle>{title}</ToastTitle>}
                    {description && (
                      <ToastDescription>{description}</ToastDescription>
                    )}
                  </div>
                  {action}
                  <ToastClose />
                </Toast>
              )
            })}
            <ToastViewport />
          </ToastProvider>
        )
      }

    components/ui/dialog.tsx: |+

      "use client"

      import * as React from "react"
      import * as DialogPrimitive from "@radix-ui/react-dialog"
      import { cn } from "@/lib/utils"
      import { Cross2Icon } from "@radix-ui/react-icons"

      const Dialog = DialogPrimitive.Root

      const DialogTrigger = DialogPrimitive.Trigger

      const DialogPortal = DialogPrimitive.Portal

      const DialogClose = DialogPrimitive.Close

      const DialogOverlay = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Overlay>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Overlay
          ref={ref}
          className={cn(
            "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
            className
          )}
          {...props}
        />
      ))
      DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

      const DialogContent = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
      >(({ className, children, ...props }, ref) => (
        <DialogPortal>
          <DialogOverlay />
          <DialogPrimitive.Content
            ref={ref}
            className={cn(
              "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
              className
            )}
            {...props}
          >
            {children}
            <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
              <Cross2Icon className="h-4 w-4" />
              <span className="sr-only">Close</span>
            </DialogPrimitive.Close>
          </DialogPrimitive.Content>
        </DialogPortal>
      ))
      DialogContent.displayName = DialogPrimitive.Content.displayName

      const DialogHeader = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col space-y-1.5 text-center sm:text-left",
            className
          )}
          {...props}
        />
      )
      DialogHeader.displayName = "DialogHeader"

      const DialogFooter = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
            className
          )}
          {...props}
        />
      )
      DialogFooter.displayName = "DialogFooter"

      const DialogTitle = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Title>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Title
          ref={ref}
          className={cn(
            "text-lg font-semibold leading-none tracking-tight",
            className
          )}
          {...props}
        />
      ))
      DialogTitle.displayName = DialogPrimitive.Title.displayName

      const DialogDescription = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Description>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Description
          ref={ref}
          className={cn("text-sm text-muted-foreground", className)}
          {...props}
        />
      ))
      DialogDescription.displayName = DialogPrimitive.Description.displayName

      export {
        Dialog,
        DialogPortal,
        DialogOverlay,
        DialogTrigger,
        DialogClose,
        DialogContent,
        DialogHeader,
        DialogFooter,
        DialogTitle,
        DialogDescription,
      }

    components/ui/alert.tsx: |+

      import * as React from "react"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const alertVariants = cva(
        "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
        {
          variants: {
            variant: {
              default: "bg-background text-foreground",
              destructive:
                "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
            },
          },
          defaultVariants: {
            variant: "default",
          },
        }
      )

      const Alert = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
      >(({ className, variant, ...props }, ref) => (
        <div
          ref={ref}
          role="alert"
          className={cn(alertVariants({ variant }), className)}
          {...props}
        />
      ))
      Alert.displayName = "Alert"

      const AlertTitle = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLHeadingElement>
      >(({ className, ...props }, ref) => (
        <h5
          ref={ref}
          className={cn("mb-1 font-medium leading-none tracking-tight", className)}
          {...props}
        />
      ))
      AlertTitle.displayName = "AlertTitle"

      const AlertDescription = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLParagraphElement>
      >(({ className, ...props }, ref) => (
        <div
          ref={ref}
          className={cn("text-sm [&_p]:leading-relaxed", className)}
          {...props}
        />
      ))
      AlertDescription.displayName = "AlertDescription"

      export { Alert, AlertTitle, AlertDescription }

    components/ui/badge.tsx: |+

      import * as React from "react"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const badgeVariants = cva(
        "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
        {
          variants: {
            variant: {
              default:
                "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
              secondary:
                "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
              destructive:
                "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
              outline: "text-foreground",
            },
          },
          defaultVariants: {
            variant: "default",
          },
        }
      )

      export interface BadgeProps
        extends React.HTMLAttributes<HTMLDivElement>,
          VariantProps<typeof badgeVariants> {}

      function Badge({ className, variant, ...props }: BadgeProps) {
        return (
          <div className={cn(badgeVariants({ variant }), className)} {...props} />
        )
      }

      export { Badge, badgeVariants }

    components/ui/separator.tsx: |+

      import * as React from "react"
      import * as SeparatorPrimitive from "@radix-ui/react-separator"

      import { cn } from "@/lib/utils"

      const Separator = React.forwardRef<
        React.ElementRef<typeof SeparatorPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
      >(
        (
          { className, orientation = "horizontal", decorative = true, ...props },
          ref
        ) => (
          <SeparatorPrimitive.Root
            ref={ref}
            decorative={decorative}
            orientation={orientation}
            className={cn(
              "shrink-0 bg-border",
              orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
              className
            )}
            {...props}
          />
        )
      )
      Separator.displayName = SeparatorPrimitive.Root.displayName

      export { Separator }

    components/ui/label.tsx: |+

      import * as React from "react"
      import * as LabelPrimitive from "@radix-ui/react-label"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const labelVariants = cva(
        "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
      )

      const Label = React.forwardRef<
        React.ElementRef<typeof LabelPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
          VariantProps<typeof labelVariants>
      >(({ className, ...props }, ref) => (
        <LabelPrimitive.Root
          ref={ref}
          className={cn(labelVariants(), className)}
          {...props}
        />
      ))
      Label.displayName = LabelPrimitive.Root.displayName

      export { Label }

    components/ui/form.tsx: |+

      "use client"

      import * as React from "react"
      import * as LabelPrimitive from "@radix-ui/react-label"
      import { Slot } from "@radix-ui/react-slot"
      import {
        Controller,
        FormProvider,
        useFormContext,
        type ControllerProps,
        type FieldPath,
        type FieldValues,
      } from "react-hook-form"

      import { cn } from "@/lib/utils"
      import { Label } from "@/components/ui/label"

      const Form = FormProvider

      type FormFieldContextValue<
        TFieldValues extends FieldValues = FieldValues,
        TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
      > = {
        name: TName
      }

      const FormFieldContext = React.createContext<FormFieldContextValue>(
        {} as FormFieldContextValue
      )

      const FormField = <
        TFieldValues extends FieldValues = FieldValues,
        TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
      >({
        ...props
      }: ControllerProps<TFieldValues, TName>) => {
        return (
          <FormFieldContext.Provider value={{ name: props.name }}>
            <Controller {...props} />
          </FormFieldContext.Provider>
        )
      }

      const useFormField = () => {
        const fieldContext = React.useContext(FormFieldContext)
        const itemContext = React.useContext(FormItemContext)
        const { getFieldState, formState } = useFormContext()

        const fieldState = getFieldState(fieldContext.name, formState)

        if (!fieldContext) {
          throw new Error("useFormField should be used within <FormField>")
        }

        const { id } = itemContext

        return {
          id,
          name: fieldContext.name,
          formItemId: `${id}-form-item`,
          formDescriptionId: `${id}-form-item-description`,
          formMessageId: `${id}-form-item-message`,
          ...fieldState,
        }
      }

      type FormItemContextValue = {
        id: string
      }

      const FormItemContext = React.createContext<FormItemContextValue>(
        {} as FormItemContextValue
      )

      const FormItem = React.forwardRef<
        HTMLDivElement,
        React.HTMLAttributes<HTMLDivElement>
      >(({ className, ...props }, ref) => {
        const id = React.useId()

        return (
          <FormItemContext.Provider value={{ id }}>
            <div ref={ref} className={cn("space-y-2", className)} {...props} />
          </FormItemContext.Provider>
        )
      })
      FormItem.displayName = "FormItem"

      const FormLabel = React.forwardRef<
        React.ElementRef<typeof LabelPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
      >(({ className, ...props }, ref) => {
        const { error, formItemId } = useFormField()

        return (
          <Label
            ref={ref}
            className={cn(error && "text-destructive", className)}
            htmlFor={formItemId}
            {...props}
          />
        )
      })
      FormLabel.displayName = "FormLabel"

      const FormControl = React.forwardRef<
        React.ElementRef<typeof Slot>,
        React.ComponentPropsWithoutRef<typeof Slot>
      >(({ ...props }, ref) => {
        const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

        return (
          <Slot
            ref={ref}
            id={formItemId}
            aria-describedby={
              !error
                ? `${formDescriptionId}`
                : `${formDescriptionId} ${formMessageId}`
            }
            aria-invalid={!!error}
            {...props}
          />
        )
      })
      FormControl.displayName = "FormControl"

      const FormDescription = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLParagraphElement>
      >(({ className, ...props }, ref) => {
        const { formDescriptionId } = useFormField()

        return (
          <p
            ref={ref}
            id={formDescriptionId}
            className={cn("text-[0.8rem] text-muted-foreground", className)}
            {...props}
          />
        )
      })
      FormDescription.displayName = "FormDescription"

      const FormMessage = React.forwardRef<
        HTMLParagraphElement,
        React.HTMLAttributes<HTMLParagraphElement>
      >(({ className, children, ...props }, ref) => {
        const { error, formMessageId } = useFormField()
        const body = error ? String(error?.message ?? "") : children

        if (!body) {
          return null
        }

        return (
          <p
            ref={ref}
            id={formMessageId}
            className={cn("text-[0.8rem] font-medium text-destructive", className)}
            {...props}
          >
            {body}
          </p>
        )
      })
      FormMessage.displayName = "FormMessage"

      export {
        useFormField,
        Form,
        FormItem,
        FormLabel,
        FormControl,
        FormDescription,
        FormMessage,
        FormField,
      }

    actions/createUser.ts: |
      import { action } from '@uibakery/data';

      function createUser() {
        return action('createUser', 'SQL', {
          databaseName: 'quickmart_safety_app',
          query: `
            INSERT INTO users (device_id, secret_code, pin_hash)
            VALUES ({{params.deviceId}}, {{params.secretCode}}, {{params.pinHash}})
            ON CONFLICT (device_id) 
            DO UPDATE SET 
              secret_code = {{params.secretCode}},
              pin_hash = {{params.pinHash}},
              updated_at = NOW()
            RETURNING *;
          `,
        });
      }

      export default createUser;
    actions/getUserByDeviceId.ts: |
      import { action } from '@uibakery/data';

      function getUserByDeviceId() {
        return action('getUserByDeviceId', 'SQL', {
          databaseName: 'quickmart_safety_app',
          query: `
            SELECT * FROM users 
            WHERE device_id = {{params.deviceId}};
          `,
        });
      }

      export default getUserByDeviceId;
    actions/updateUserSettings.ts: |
      import { action } from '@uibakery/data';

      function updateUserSettings() {
        return action('updateUserSettings', 'SQL', {
          databaseName: 'quickmart_safety_app',
          query: `
            INSERT INTO settings (user_id, setting_key, setting_value)
            VALUES ({{params.userId}}, {{params.key}}, {{params.value}})
            ON CONFLICT (user_id, setting_key)
            DO UPDATE SET 
              setting_value = {{params.value}},
              updated_at = NOW()
            RETURNING *;
          `,
        });
      }

      export default updateUserSettings;
    actions/getUserSettings.ts: |
      import { action } from '@uibakery/data';

      function getUserSettings() {
        return action('getUserSettings', 'SQL', {
          databaseName: 'quickmart_safety_app',
          query: `
            SELECT setting_key, setting_value 
            FROM settings 
            WHERE user_id = {{params.userId}};
          `,
        });
      }

      export default getUserSettings;
    lib/auth.ts: >


      // Simple hash function for PIN/password (in production, use proper
      bcrypt)

      export async function hashPin(pin: string): Promise<string> {
        const encoder = new TextEncoder();
        const data = encoder.encode(pin);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
      }


      export async function verifyPin(pin: string, hash: string):
      Promise<boolean> {
        const pinHash = await hashPin(pin);
        return pinHash === hash;
      }


      export function getDeviceId(): string {
        let deviceId = localStorage.getItem('quickmart_device_id');
        if (!deviceId) {
          deviceId = 'device_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
          localStorage.setItem('quickmart_device_id', deviceId);
        }
        return deviceId;
      }
    lib/storage.ts: >
      import { locationTracker, LocationData } from './location';

      import { encryptedStorage, mediaStorage } from './encryptedStorage';


      // Enhanced app settings with new options

      export interface AppSettings {
        secretCode: string;
        pinSet: boolean;
        backgroundLogging: boolean;
        loggingInterval: number;
        autoDeleteDays: number;
        autoOpenWhatsApp: boolean;
        sosRecordingMode: 'audio' | 'video' | 'both';
      }


      const DEFAULT_SETTINGS: AppSettings = {
        secretCode: '#5555',
        pinSet: false,
        backgroundLogging: false,
        loggingInterval: 5,
        autoDeleteDays: 7,
        autoOpenWhatsApp: true,
        sosRecordingMode: 'both',
      };


      export function getAppSettings(): AppSettings {
        try {
          const stored = localStorage.getItem('quickmart_settings');
          if (stored) {
            return { ...DEFAULT_SETTINGS, ...JSON.parse(stored) };
          }
        } catch (error) {
          console.error('Failed to load settings:', error);
        }
        return DEFAULT_SETTINGS;
      }


      export function saveAppSettings(settings: Partial<AppSettings>): void {
        try {
          const current = getAppSettings();
          const updated = { ...current, ...settings };
          localStorage.setItem('quickmart_settings', JSON.stringify(updated));
        } catch (error) {
          console.error('Failed to save settings:', error);
        }
      }


      // Enhanced location function using new location tracker

      export async function getCurrentLocation(): Promise<LocationData> {
        return await locationTracker.getCurrentLocation();
      }


      // Legacy compatibility function

      export function getCurrentLocationLegacy(): Promise<GeolocationPosition> {
        return new Promise((resolve, reject) => {
          if (!navigator.geolocation) {
            reject(new Error('Geolocation is not supported'));
            return;
          }

          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000, // 5 minutes
          });
        });
      }


      // Background location logging

      class BackgroundLocationService {
        private isActive = false;

        async startLogging(userId: number, intervalMinutes: number, onLocationSaved: (location: LocationData) => void): Promise<void> {
          if (this.isActive) return;
          
          this.isActive = true;
          
          // Store encrypted location history locally
          const locationHistory = await encryptedStorage.getItem<LocationData[]>('location_history') || [];

          locationTracker.startBackgroundTracking(intervalMinutes, async (location) => {
            try {
              // Add to local encrypted storage
              locationHistory.push(location);
              
              // Keep only last 1000 entries
              if (locationHistory.length > 1000) {
                locationHistory.splice(0, locationHistory.length - 1000);
              }
              
              await encryptedStorage.setItem('location_history', locationHistory);
              
              // Call callback for database sync
              onLocationSaved(location);
              
            } catch (error) {
              console.error('Failed to save location locally:', error);
            }
          });
        }

        stopLogging(): void {
          this.isActive = false;
          locationTracker.stopBackgroundTracking();
        }

        isLogging(): boolean {
          return this.isActive;
        }
      }


      export const backgroundLocationService = new BackgroundLocationService();


      // Media capture utilities

      export async function capturePhoto(): Promise<Blob | null> {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: 'environment', width: 1280, height: 720 } 
          });
          
          const video = document.createElement('video');
          video.srcObject = stream;
          video.play();

          return new Promise((resolve, reject) => {
            video.addEventListener('loadedmetadata', () => {
              const canvas = document.createElement('canvas');
              canvas.width = video.videoWidth;
              canvas.height = video.videoHeight;
              
              const ctx = canvas.getContext('2d');
              if (!ctx) {
                stream.getTracks().forEach(track => track.stop());
                reject(new Error('Could not get canvas context'));
                return;
              }
              
              ctx.drawImage(video, 0, 0);
              stream.getTracks().forEach(track => track.stop());
              
              canvas.toBlob((blob) => {
                resolve(blob);
              }, 'image/jpeg', 0.8);
            });
          });
          
        } catch (error) {
          console.error('Photo capture failed:', error);
          return null;
        }
      }


      export async function captureVideo(durationSeconds: number = 10):
      Promise<Blob | null> {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ 
            video: { facingMode: 'environment', width: 640, height: 480 },
            audio: true
          });
          
          const mediaRecorder = new MediaRecorder(stream, {
            mimeType: 'video/webm;codecs=vp8,opus'
          });
          
          const chunks: Blob[] = [];
          
          return new Promise((resolve, reject) => {
            mediaRecorder.ondataavailable = (event) => {
              if (event.data.size > 0) {
                chunks.push(event.data);
              }
            };
            
            mediaRecorder.onstop = () => {
              stream.getTracks().forEach(track => track.stop());
              const blob = new Blob(chunks, { type: 'video/webm' });
              resolve(blob);
            };
            
            mediaRecorder.onerror = (error) => {
              stream.getTracks().forEach(track => track.stop());
              reject(error);
            };
            
            mediaRecorder.start();
            
            setTimeout(() => {
              if (mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
              }
            }, durationSeconds * 1000);
          });
          
        } catch (error) {
          console.error('Video capture failed:', error);
          return null;
        }
      }


      export async function captureAudio(durationSeconds: number = 10):
      Promise<Blob | null> {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          
          const mediaRecorder = new MediaRecorder(stream, {
            mimeType: 'audio/webm;codecs=opus'
          });
          
          const chunks: Blob[] = [];
          
          return new Promise((resolve, reject) => {
            mediaRecorder.ondataavailable = (event) => {
              if (event.data.size > 0) {
                chunks.push(event.data);
              }
            };
            
            mediaRecorder.onstop = () => {
              stream.getTracks().forEach(track => track.stop());
              const blob = new Blob(chunks, { type: 'audio/webm' });
              resolve(blob);
            };
            
            mediaRecorder.onerror = (error) => {
              stream.getTracks().forEach(track => track.stop());
              reject(error);
            };
            
            mediaRecorder.start();
            
            setTimeout(() => {
              if (mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
              }
            }, durationSeconds * 1000);
          });
          
        } catch (error) {
          console.error('Audio capture failed:', error);
          return null;
        }
      }
    components/ShoppingInterface.tsx: >
      import React, { useState } from 'react';

      import { Input } from '@/components/ui/input';

      import { Button } from '@/components/ui/button';

      import { Card, CardContent } from '@/components/ui/card';

      import { Search, ShoppingBag, Settings } from 'lucide-react';

      import { getAppSettings } from '@/lib/storage';


      interface ShoppingInterfaceProps {
        onSecretCodeEntered: () => void;
        onOpenSettings: () => void;
      }


      export default function ShoppingInterface({ onSecretCodeEntered,
      onOpenSettings }: ShoppingInterfaceProps) {
        const [searchQuery, setSearchQuery] = useState('');
        const [currentUrl, setCurrentUrl] = useState('');

        const handleSearch = () => {
          const settings = getAppSettings();
          
          // Check for secret code
          if (searchQuery.trim() === settings.secretCode) {
            setSearchQuery(''); // Clear the search to maintain disguise
            onSecretCodeEntered();
            return;
          }

          // Normal shopping search
          if (searchQuery.trim()) {
            const encodedQuery = encodeURIComponent(searchQuery.trim());
            const amazonUrl = `https://www.amazon.in/s?k=${encodedQuery}`;
            setCurrentUrl(amazonUrl);
          }
        };

        const handleKeyPress = (e: React.KeyboardEvent) => {
          if (e.key === 'Enter') {
            handleSearch();
          }
        };

        return (
          <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
            {/* Header */}
            <div className="bg-blue-600 text-white shadow-lg">
              <div className="container mx-auto px-4 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <ShoppingBag className="h-8 w-8" />
                    <h1 className="text-2xl font-bold">QuickMart</h1>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="text-sm opacity-90">Your Shopping Companion</div>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={onOpenSettings}
                      className="text-white hover:bg-blue-700"
                    >
                      <Settings className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </div>

            {/* Search Section */}
            <div className="container mx-auto px-4 py-6">
              <Card className="shadow-md">
                <CardContent className="p-6">
                  <div className="flex flex-col sm:flex-row gap-3">
                    <div className="flex-1">
                      <Input
                        type="text"
                        placeholder="Search for products, brands, categories..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        onKeyPress={handleKeyPress}
                        className="text-lg py-3"
                      />
                    </div>
                    <Button 
                      onClick={handleSearch}
                      className="bg-blue-600 hover:bg-blue-700 px-8 py-3"
                      size="lg"
                    >
                      <Search className="h-5 w-5 mr-2" />
                      Search
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Shopping Categories */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8">
                {[
                  { name: 'Electronics', emoji: '📱' },
                  { name: 'Fashion', emoji: '👗' },
                  { name: 'Home & Garden', emoji: '🏠' },
                  { name: 'Books', emoji: '📚' },
                  { name: 'Sports', emoji: '⚽' },
                  { name: 'Beauty', emoji: '💄' },
                  { name: 'Groceries', emoji: '🛒' },
                  { name: 'Toys', emoji: '🧸' }
                ].map((category) => (
                  <Card 
                    key={category.name} 
                    className="cursor-pointer hover:shadow-md transition-shadow"
                    onClick={() => {
                      setSearchQuery(category.name);
                      const encodedQuery = encodeURIComponent(category.name);
                      setCurrentUrl(`https://www.amazon.in/s?k=${encodedQuery}`);
                    }}
                  >
                    <CardContent className="p-4 text-center">
                      <div className="text-3xl mb-2">{category.emoji}</div>
                      <div className="font-medium text-sm">{category.name}</div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            {/* Shopping Results WebView */}
            {currentUrl && (
              <div className="container mx-auto px-4 pb-6">
                <Card className="shadow-md">
                  <CardContent className="p-0">
                    <iframe
                      src={currentUrl}
                      className="w-full h-96 border-0 rounded-lg"
                      title="Shopping Results"
                      sandbox="allow-scripts allow-same-origin allow-forms"
                    />
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Popular Deals Section */}
            {!currentUrl && (
              <div className="container mx-auto px-4">
                <h2 className="text-xl font-bold mb-4">Popular Deals</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {[
                    { title: 'Electronics Sale', desc: 'Up to 50% off smartphones', image: '📱' },
                    { title: 'Fashion Week', desc: 'Trending styles for everyone', image: '👔' },
                    { title: 'Home Essentials', desc: 'Everything for your home', image: '🏠' }
                  ].map((deal, index) => (
                    <Card key={index} className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="text-4xl mb-3 text-center">{deal.image}</div>
                        <h3 className="font-semibold text-lg mb-2">{deal.title}</h3>
                        <p className="text-gray-600 text-sm">{deal.desc}</p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
          </div>
        );
      }
    components/AuthDialog.tsx: |
      import React, { useState } from 'react';
      import {
        Dialog,
        DialogContent,
        DialogDescription,
        DialogHeader,
        DialogTitle,
      } from '@/components/ui/dialog';
      import { Button } from '@/components/ui/button';
      import { Input } from '@/components/ui/input';
      import { Alert, AlertDescription } from '@/components/ui/alert';
      import { Lock, Eye, EyeOff } from 'lucide-react';
      import { verifyPin } from '@/lib/auth';

      interface AuthDialogProps {
        isOpen: boolean;
        onAuthenticated: () => void;
        userPinHash: string;
        title?: string;
        description?: string;
      }

      export default function AuthDialog({ 
        isOpen, 
        onAuthenticated, 
        userPinHash,
        title = "Authentication Required",
        description = "Please enter your PIN to continue"
      }: AuthDialogProps) {
        const [pin, setPin] = useState('');
        const [showPin, setShowPin] = useState(false);
        const [error, setError] = useState('');
        const [isVerifying, setIsVerifying] = useState(false);

        const handleSubmit = async (e: React.FormEvent) => {
          e.preventDefault();
          if (!pin.trim()) return;

          setIsVerifying(true);
          setError('');

          try {
            const isValid = await verifyPin(pin.trim(), userPinHash);
            if (isValid) {
              setPin('');
              onAuthenticated();
            } else {
              setError('Invalid PIN. Please try again.');
            }
          } catch (err) {
            setError('Authentication failed. Please try again.');
          } finally {
            setIsVerifying(false);
          }
        };

        const handleKeyPress = (e: React.KeyboardEvent) => {
          // Only allow numbers for PIN
          if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Escape', 'Enter'].includes(e.key)) {
            e.preventDefault();
          }
        };

        return (
          <Dialog open={isOpen} onOpenChange={() => {}}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader className="text-center">
                <DialogTitle className="flex items-center justify-center gap-2">
                  <Lock className="h-5 w-5" />
                  {title}
                </DialogTitle>
                <DialogDescription>
                  {description}
                </DialogDescription>
              </DialogHeader>

              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="relative">
                  <Input
                    type={showPin ? "text" : "password"}
                    placeholder="Enter PIN"
                    value={pin}
                    onChange={(e) => setPin(e.target.value)}
                    onKeyPress={handleKeyPress}
                    maxLength={10}
                    className="pr-12 text-lg text-center tracking-wider"
                    autoFocus
                    disabled={isVerifying}
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1"
                    onClick={() => setShowPin(!showPin)}
                    disabled={isVerifying}
                  >
                    {showPin ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>

                {error && (
                  <Alert variant="destructive">
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}

                <Button 
                  type="submit" 
                  className="w-full" 
                  disabled={!pin.trim() || isVerifying}
                >
                  {isVerifying ? 'Verifying...' : 'Unlock'}
                </Button>
              </form>
            </DialogContent>
          </Dialog>
        );
      }
    components/SafetyDashboard.tsx: >
      import React, { useState, useEffect } from 'react';

      import { Button } from '@/components/ui/button';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Badge } from '@/components/ui/badge';

      import { Separator } from '@/components/ui/separator';

      import { useToast } from '@/hooks/use-toast';

      import { 
        ShieldAlert, 
        Phone, 
        Settings, 
        MapPin, 
        Clock, 
        ExternalLink,
        Navigation,
        Zap
      } from 'lucide-react';

      import { getCurrentLocation, getAppSettings, capturePhoto, captureVideo,
      captureAudio } from '@/lib/storage';

      import { mediaStorage } from '@/lib/encryptedStorage';

      import { useMutateAction } from '@uibakery/data';

      import saveLocationLogAction from '@/actions/saveLocationLog';


      interface SafetyDashboardProps {
        onQuickExit: () => void;
        onOpenSettings: () => void;
        currentUser: any;
      }


      interface LocationData {
        latitude: number;
        longitude: number;
        accuracy: number;
        timestamp: Date;
      }


      export default function SafetyDashboard({ 
        onQuickExit, 
        onOpenSettings,
        currentUser 
      }: SafetyDashboardProps) {
        const { toast } = useToast();
        const [saveLocationLog] = useMutateAction(saveLocationLogAction);
        const [currentLocation, setCurrentLocation] = useState<LocationData | null>(null);
        const [isLocating, setIsLocating] = useState(false);
        const [backgroundLogging, setBackgroundLogging] = useState(false);

        useEffect(() => {
          updateLocation();
        }, []);

        const updateLocation = async () => {
          setIsLocating(true);
          try {
            const location = await getCurrentLocation();
            setCurrentLocation(location);
          } catch (error) {
            console.error('Location error:', error);
            toast({
              title: "Location Error",
              description: "Could not get current location. Please enable location services.",
              variant: "destructive"
            });
          } finally {
            setIsLocating(false);
          }
        };

        const handleSOS = async () => {
          toast({
            title: "SOS Activated",
            description: "Gathering location and preparing emergency data...",
          });

          try {
            // Get current location with enhanced accuracy
            const location = await getCurrentLocation();
            const lat = location.latitude;
            const lng = location.longitude;
            const timestamp = new Date().toISOString();
            const settings = getAppSettings();

            // Create SOS message
            const sosMessage = `🆘 SOS! I need help. My location: https://maps.google.com/?q=${lat},${lng} (Time: ${timestamp}) Accuracy: ±${Math.round(location.accuracy)}m`;

            // Capture media based on settings
            const mediaPromises: Promise<any>[] = [];
            
            if (settings.sosRecordingMode === 'audio' || settings.sosRecordingMode === 'both') {
              mediaPromises.push(
                captureAudio(10).then(blob => blob ? { type: 'audio', blob } : null)
              );
            }
            
            if (settings.sosRecordingMode === 'video' || settings.sosRecordingMode === 'both') {
              mediaPromises.push(
                captureVideo(10).then(blob => blob ? { type: 'video', blob } : null)
              );
            }

            // Also capture photo
            mediaPromises.push(
              capturePhoto().then(blob => blob ? { type: 'photo', blob } : null)
            );

            // Store location immediately in encrypted storage and database
            try {
              if (currentUser) {
                await saveLocationLog({
                  userId: currentUser.id,
                  latitude: lat,
                  longitude: lng,
                  accuracy: location.accuracy,
                  timestamp: location.timestamp.toISOString(),
                  logType: 'sos'
                });
              }
            } catch (dbError) {
              console.warn('Database location save failed, continuing with local storage:', dbError);
            }

            // Wait for media capture (with timeout)
            let capturedMedia: any[] = [];
            try {
              const mediaResults = await Promise.allSettled(mediaPromises);
              capturedMedia = mediaResults
                .filter(result => result.status === 'fulfilled' && result.value)
                .map(result => (result as PromiseFulfilledResult<any>).value);
            } catch (mediaError) {
              console.warn('Media capture failed, continuing with text-only SOS:', mediaError);
            }

            // Store captured media locally with encryption
            for (const media of capturedMedia) {
              if (media && media.blob) {
                const mediaFile = {
                  id: `sos_${Date.now()}_${media.type}`,
                  type: media.type,
                  blob: media.blob,
                  timestamp: new Date(),
                  metadata: { sosEvent: true, location }
                };
                
                try {
                  await mediaStorage.storeMedia(mediaFile);
                } catch (storageError) {
                  console.warn('Local media storage failed:', storageError);
                }
              }
            }

            // Send emergency messages with progressive fallback
            await sendEmergencyMessages(sosMessage);

            toast({
              title: "SOS Complete",
              description: `Emergency alert sent with location and ${capturedMedia.length} media files captured.`,
            });

          } catch (error) {
            console.error('SOS error:', error);
            
            // Fallback: Basic SMS with coordinates only
            try {
              const basicMessage = `🆘 SOS! Emergency at current location. Please call for help.`;
              const smsUrl = `sms:?body=${encodeURIComponent(basicMessage)}`;
              window.open(smsUrl, '_blank');
              
              toast({
                title: "SOS Fallback",
                description: "Basic emergency SMS sent. Advanced features failed.",
                variant: "destructive"
              });
            } catch (fallbackError) {
              toast({
                title: "SOS Failed",
                description: "All emergency methods failed. Please manually call for help.",
                variant: "destructive"
              });
            }
          }
        };

        const sendEmergencyMessages = async (message: string) => {
          const settings = getAppSettings();
          
          if (settings.autoOpenWhatsApp) {
            // Try WhatsApp first
            const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
            const whatsappWindow = window.open(whatsappUrl, '_blank');
            
            // Wait and check if WhatsApp opened successfully
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            if (!whatsappWindow || whatsappWindow.closed) {
              // Fallback to SMS
              const smsUrl = `sms:?body=${encodeURIComponent(message)}`;
              window.open(smsUrl, '_blank');
            }
          } else {
            // Direct SMS
            const smsUrl = `sms:?body=${encodeURIComponent(message)}`;
            window.open(smsUrl, '_blank');
          }
          
          // Also try email as additional fallback
          setTimeout(() => {
            const emailSubject = '🆘 EMERGENCY SOS ALERT';
            const emailUrl = `mailto:?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(message)}`;
            window.open(emailUrl, '_blank');
          }, 1000);
        };

        const dialHelpline = (number: string) => {
          window.open(`tel:${number}`, '_self');
        };

        const formatLocation = (loc: LocationData) => {
          return `${loc.latitude.toFixed(6)}, ${loc.longitude.toFixed(6)}`;
        };

        const formatTimestamp = (timestamp: Date) => {
          return timestamp.toLocaleString();
        };

        return (
          <div className="min-h-screen bg-gradient-to-b from-red-50 to-orange-50">
            {/* Header */}
            <div className="bg-red-600 text-white shadow-lg">
              <div className="container mx-auto px-4 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <ShieldAlert className="h-8 w-8" />
                    <h1 className="text-2xl font-bold">Safety Dashboard</h1>
                  </div>
                  <Button 
                    variant="secondary" 
                    onClick={onQuickExit}
                    className="bg-white text-red-600 hover:bg-gray-100"
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Quick Exit
                  </Button>
                </div>
              </div>
            </div>

            <div className="container mx-auto px-4 py-6 space-y-6">
              {/* SOS Button */}
              <Card className="border-red-200 shadow-lg">
                <CardContent className="p-8 text-center">
                  <Button 
                    onClick={handleSOS}
                    size="lg"
                    className="bg-red-600 hover:bg-red-700 text-white h-20 w-full max-w-md text-xl font-bold"
                  >
                    <ShieldAlert className="h-8 w-8 mr-3" />
                    SOS - EMERGENCY
                  </Button>
                  <p className="text-sm text-gray-600 mt-4">
                    Press to send emergency location and alerts to your contacts
                  </p>
                </CardContent>
              </Card>

              {/* Location Status */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="h-5 w-5" />
                    Current Location
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {currentLocation ? (
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="font-medium">Coordinates:</span>
                        <span className="font-mono text-sm">{formatLocation(currentLocation)}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="font-medium">Accuracy:</span>
                        <Badge variant="secondary">±{Math.round(currentLocation.accuracy)}m</Badge>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="font-medium">Last Update:</span>
                        <span className="text-sm text-gray-600">{formatTimestamp(currentLocation.timestamp)}</span>
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-500">Location not available</p>
                  )}
                  
                  <Button 
                    onClick={updateLocation} 
                    disabled={isLocating}
                    variant="outline"
                    className="w-full"
                  >
                    <Navigation className="h-4 w-4 mr-2" />
                    {isLocating ? 'Getting Location...' : 'Update Location'}
                  </Button>
                </CardContent>
              </Card>

              {/* Emergency Helplines */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Phone className="h-5 w-5" />
                    Emergency Helplines
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <Button 
                      onClick={() => dialHelpline('112')}
                      variant="outline"
                      className="justify-start border-red-200 hover:bg-red-50"
                    >
                      <Phone className="h-4 w-4 mr-2" />
                      112 - Emergency
                    </Button>
                    <Button 
                      onClick={() => dialHelpline('1091')}
                      variant="outline" 
                      className="justify-start border-red-200 hover:bg-red-50"
                    >
                      <Phone className="h-4 w-4 mr-2" />
                      1091 - Women Helpline
                    </Button>
                    <Button 
                      onClick={() => dialHelpline('1098')}
                      variant="outline"
                      className="justify-start border-red-200 hover:bg-red-50"
                    >
                      <Phone className="h-4 w-4 mr-2" />
                      1098 - Child Helpline
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Background Logging Status */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Clock className="h-5 w-5" />
                    Background Location Logging
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Status:</span>
                    <Badge variant={backgroundLogging ? "default" : "secondary"}>
                      {backgroundLogging ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                  
                  <div className="flex gap-2">
                    <Button 
                      onClick={() => {
                        setBackgroundLogging(true);
                        toast({ description: "Background logging started" });
                      }}
                      disabled={backgroundLogging}
                      size="sm"
                      className="flex-1"
                    >
                      <Zap className="h-4 w-4 mr-2" />
                      Start Logging
                    </Button>
                    <Button 
                      onClick={() => {
                        setBackgroundLogging(false);
                        toast({ description: "Background logging stopped" });
                      }}
                      disabled={!backgroundLogging}
                      variant="outline"
                      size="sm"
                      className="flex-1"
                    >
                      Stop Logging
                    </Button>
                  </div>
                </CardContent>
              </Card>

              <Separator />

              {/* Settings */}
              <Button 
                onClick={onOpenSettings}
                variant="outline" 
                className="w-full"
              >
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
            </div>
          </div>
        );
      }
    migrations/applied.txt: |
      Applied migrations:
      1732569891_create_safety_app_schema at 2025-09-25T20:28:12.859Z
    lib/location.ts: |
      // Enhanced location tracking with multiple positioning methods
      export interface LocationData {
        latitude: number;
        longitude: number;
        accuracy: number;
        altitude?: number;
        altitudeAccuracy?: number;
        heading?: number;
        speed?: number;
        timestamp: Date;
        source: 'gps' | 'network' | 'passive';
      }

      export interface LocationHistoryEntry extends LocationData {
        id: string;
        userId: number;
        logType: 'background' | 'sos' | 'manual';
      }

      class LocationTracker {
        private watchId: number | null = null;
        private isTracking = false;
        private lastKnownLocation: LocationData | null = null;

        async getCurrentLocation(): Promise<LocationData> {
          return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
              reject(new Error('Geolocation is not supported'));
              return;
            }

            // Try high-accuracy GPS first
            const options: PositionOptions = {
              enableHighAccuracy: true,
              timeout: 15000,
              maximumAge: 30000, // 30 seconds
            };

            navigator.geolocation.getCurrentPosition(
              (position) => {
                const locationData: LocationData = {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude,
                  accuracy: position.coords.accuracy,
                  altitude: position.coords.altitude || undefined,
                  altitudeAccuracy: position.coords.altitudeAccuracy || undefined,
                  heading: position.coords.heading || undefined,
                  speed: position.coords.speed || undefined,
                  timestamp: new Date(position.timestamp),
                  source: position.coords.accuracy < 100 ? 'gps' : 'network'
                };
                
                this.lastKnownLocation = locationData;
                resolve(locationData);
              },
              (error) => {
                // Fallback to less accurate but faster method
                if (this.lastKnownLocation && 
                    (Date.now() - this.lastKnownLocation.timestamp.getTime()) < 300000) { // 5 minutes
                  resolve(this.lastKnownLocation);
                } else {
                  this.tryLowAccuracyLocation().then(resolve).catch(reject);
                }
              },
              options
            );
          });
        }

        private async tryLowAccuracyLocation(): Promise<LocationData> {
          return new Promise((resolve, reject) => {
            const options: PositionOptions = {
              enableHighAccuracy: false,
              timeout: 10000,
              maximumAge: 60000, // 1 minute
            };

            navigator.geolocation.getCurrentPosition(
              (position) => {
                const locationData: LocationData = {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude,
                  accuracy: position.coords.accuracy,
                  altitude: position.coords.altitude || undefined,
                  altitudeAccuracy: position.coords.altitudeAccuracy || undefined,
                  heading: position.coords.heading || undefined,
                  speed: position.coords.speed || undefined,
                  timestamp: new Date(position.timestamp),
                  source: 'network'
                };
                
                this.lastKnownLocation = locationData;
                resolve(locationData);
              },
              reject,
              options
            );
          });
        }

        startBackgroundTracking(intervalMinutes: number, onLocationUpdate: (location: LocationData) => void): void {
          if (this.isTracking) {
            this.stopBackgroundTracking();
          }

          this.isTracking = true;
          
          // Use watchPosition for continuous tracking
          const options: PositionOptions = {
            enableHighAccuracy: true,
            timeout: 30000,
            maximumAge: 60000, // 1 minute
          };

          this.watchId = navigator.geolocation.watchPosition(
            (position) => {
              const locationData: LocationData = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                accuracy: position.coords.accuracy,
                altitude: position.coords.altitude || undefined,
                altitudeAccuracy: position.coords.altitudeAccuracy || undefined,
                heading: position.coords.heading || undefined,
                speed: position.coords.speed || undefined,
                timestamp: new Date(position.timestamp),
                source: position.coords.accuracy < 100 ? 'gps' : 'network'
              };
              
              this.lastKnownLocation = locationData;
              onLocationUpdate(locationData);
            },
            (error) => {
              console.error('Background location tracking error:', error);
            },
            options
          );

          // Additional periodic updates
          const intervalId = setInterval(async () => {
            if (!this.isTracking) {
              clearInterval(intervalId);
              return;
            }
            
            try {
              const location = await this.getCurrentLocation();
              onLocationUpdate(location);
            } catch (error) {
              console.error('Periodic location update failed:', error);
            }
          }, intervalMinutes * 60 * 1000);
        }

        stopBackgroundTracking(): void {
          this.isTracking = false;
          if (this.watchId !== null) {
            navigator.geolocation.clearWatch(this.watchId);
            this.watchId = null;
          }
        }

        getLastKnownLocation(): LocationData | null {
          return this.lastKnownLocation;
        }

        isCurrentlyTracking(): boolean {
          return this.isTracking;
        }
      }

      export const locationTracker = new LocationTracker();
    lib/encryptedStorage.ts: |
      // Encrypted local storage for sensitive data
      class EncryptedStorage {
        private encryptionKey: CryptoKey | null = null;
        
        private async getEncryptionKey(): Promise<CryptoKey> {
          if (this.encryptionKey) {
            return this.encryptionKey;
          }

          // Try to load existing key
          const keyData = localStorage.getItem('quickmart_encryption_key');
          if (keyData) {
            try {
              const keyBuffer = new Uint8Array(JSON.parse(keyData));
              this.encryptionKey = await crypto.subtle.importKey(
                'raw',
                keyBuffer,
                { name: 'AES-GCM' },
                false,
                ['encrypt', 'decrypt']
              );
              return this.encryptionKey;
            } catch (error) {
              console.error('Failed to load encryption key:', error);
            }
          }

          // Generate new key
          this.encryptionKey = await crypto.subtle.generateKey(
            { name: 'AES-GCM', length: 256 },
            true,
            ['encrypt', 'decrypt']
          );

          // Store key (in production, use more secure key derivation)
          const keyBuffer = await crypto.subtle.exportKey('raw', this.encryptionKey);
          localStorage.setItem('quickmart_encryption_key', JSON.stringify(Array.from(new Uint8Array(keyBuffer))));

          return this.encryptionKey;
        }

        async encrypt(data: string): Promise<string> {
          const key = await this.getEncryptionKey();
          const encoder = new TextEncoder();
          const iv = crypto.getRandomValues(new Uint8Array(12));
          
          const encrypted = await crypto.subtle.encrypt(
            { name: 'AES-GCM', iv },
            key,
            encoder.encode(data)
          );

          const combined = new Uint8Array(iv.length + encrypted.byteLength);
          combined.set(iv);
          combined.set(new Uint8Array(encrypted), iv.length);

          return btoa(String.fromCharCode(...combined));
        }

        async decrypt(encryptedData: string): Promise<string> {
          const key = await this.getEncryptionKey();
          const combined = new Uint8Array(Array.from(atob(encryptedData), c => c.charCodeAt(0)));
          
          const iv = combined.slice(0, 12);
          const encrypted = combined.slice(12);

          const decrypted = await crypto.subtle.decrypt(
            { name: 'AES-GCM', iv },
            key,
            encrypted
          );

          const decoder = new TextDecoder();
          return decoder.decode(decrypted);
        }

        async setItem(key: string, value: any): Promise<void> {
          try {
            const serialized = JSON.stringify(value);
            const encrypted = await this.encrypt(serialized);
            localStorage.setItem(`quickmart_encrypted_${key}`, encrypted);
          } catch (error) {
            console.error('Failed to store encrypted data:', error);
            throw error;
          }
        }

        async getItem<T>(key: string): Promise<T | null> {
          try {
            const encrypted = localStorage.getItem(`quickmart_encrypted_${key}`);
            if (!encrypted) return null;
            
            const decrypted = await this.decrypt(encrypted);
            return JSON.parse(decrypted);
          } catch (error) {
            console.error('Failed to retrieve encrypted data:', error);
            return null;
          }
        }

        async removeItem(key: string): Promise<void> {
          localStorage.removeItem(`quickmart_encrypted_${key}`);
        }

        async clear(): Promise<void> {
          const keys = Object.keys(localStorage).filter(key => key.startsWith('quickmart_encrypted_'));
          keys.forEach(key => localStorage.removeItem(key));
        }
      }

      export const encryptedStorage = new EncryptedStorage();

      // Media storage interface for local files
      export interface MediaFile {
        id: string;
        type: 'photo' | 'video' | 'audio';
        blob: Blob;
        timestamp: Date;
        metadata?: any;
      }

      class MediaStorage {
        private dbName = 'QuickMartMedia';
        private dbVersion = 1;
        private db: IDBDatabase | null = null;

        async init(): Promise<void> {
          return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.dbVersion);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
              this.db = request.result;
              resolve();
            };
            
            request.onupgradeneeded = (event) => {
              const db = (event.target as IDBOpenDBRequest).result;
              if (!db.objectStoreNames.contains('media')) {
                const store = db.createObjectStore('media', { keyPath: 'id' });
                store.createIndex('type', 'type');
                store.createIndex('timestamp', 'timestamp');
              }
            };
          });
        }

        async storeMedia(file: MediaFile): Promise<void> {
          if (!this.db) await this.init();
          
          return new Promise((resolve, reject) => {
            const transaction = this.db!.transaction(['media'], 'readwrite');
            const store = transaction.objectStore('media');
            
            const request = store.put(file);
            request.onsuccess = () => resolve();
            request.onerror = () => reject(request.error);
          });
        }

        async getMedia(id: string): Promise<MediaFile | null> {
          if (!this.db) await this.init();
          
          return new Promise((resolve, reject) => {
            const transaction = this.db!.transaction(['media'], 'readonly');
            const store = transaction.objectStore('media');
            
            const request = store.get(id);
            request.onsuccess = () => resolve(request.result || null);
            request.onerror = () => reject(request.error);
          });
        }

        async getAllMedia(type?: 'photo' | 'video' | 'audio'): Promise<MediaFile[]> {
          if (!this.db) await this.init();
          
          return new Promise((resolve, reject) => {
            const transaction = this.db!.transaction(['media'], 'readonly');
            const store = transaction.objectStore('media');
            
            const request = type ? store.index('type').getAll(type) : store.getAll();
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
          });
        }

        async deleteMedia(id: string): Promise<void> {
          if (!this.db) await this.init();
          
          return new Promise((resolve, reject) => {
            const transaction = this.db!.transaction(['media'], 'readwrite');
            const store = transaction.objectStore('media');
            
            const request = store.delete(id);
            request.onsuccess = () => resolve();
            request.onerror = () => reject(request.error);
          });
        }

        async clearOldMedia(olderThanDays: number): Promise<void> {
          if (!this.db) await this.init();
          
          const cutoffDate = new Date(Date.now() - olderThanDays * 24 * 60 * 60 * 1000);
          
          return new Promise((resolve, reject) => {
            const transaction = this.db!.transaction(['media'], 'readwrite');
            const store = transaction.objectStore('media');
            const index = store.index('timestamp');
            
            const request = index.openCursor(IDBKeyRange.upperBound(cutoffDate));
            
            request.onsuccess = (event) => {
              const cursor = (event.target as IDBRequest).result;
              if (cursor) {
                cursor.delete();
                cursor.continue();
              } else {
                resolve();
              }
            };
            
            request.onerror = () => reject(request.error);
          });
        }
      }

      export const mediaStorage = new MediaStorage();
    actions/saveLocationLog.ts: |
      import { action } from '@uibakery/data';

      function saveLocationLog() {
        return action('saveLocationLog', 'SQL', {
          databaseName: 'ddb2',
          query: `
            INSERT INTO location_logs (user_id, latitude, longitude, accuracy, timestamp, log_type)
            VALUES ({{params.userId}}, {{params.latitude}}, {{params.longitude}}, {{params.accuracy}}, {{params.timestamp}}, {{params.logType}})
            RETURNING *;
          `,
        });
      }

      export default saveLocationLog;
    actions/createSOSEvent.ts: |
      import { action } from '@uibakery/data';

      function createSOSEvent() {
        return action('createSOSEvent', 'SQL', {
          databaseName: 'ddb2',
          query: `
            INSERT INTO sos_events (user_id, latitude, longitude, accuracy, photo_url, video_url, location_file_url, messages_sent)
            VALUES ({{params.userId}}, {{params.latitude}}, {{params.longitude}}, {{params.accuracy}}, {{params.photoUrl}}, {{params.videoUrl}}, {{params.locationFileUrl}}, {{params.messagesSent}}::jsonb)
            RETURNING *;
          `,
        });
      }

      export default createSOSEvent;
    actions/getLocationHistory.ts: |
      import { action } from '@uibakery/data';

      function getLocationHistory() {
        return action('getLocationHistory', 'SQL', {
          databaseName: 'ddb2',
          query: `
            SELECT * FROM location_logs 
            WHERE user_id = {{params.userId}}
            ORDER BY timestamp DESC
            LIMIT {{params.limit}};
          `,
        });
      }

      export default getLocationHistory;
    components/SettingsPage.tsx: >
      import React, { useState, useEffect } from 'react';

      import { Button } from '@/components/ui/button';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Input } from '@/components/ui/input';

      import { Label } from '@/components/ui/label';

      import { Badge } from '@/components/ui/badge';

      import { Separator } from '@/components/ui/separator';

      import { Alert, AlertDescription } from '@/components/ui/alert';

      import { useToast } from '@/hooks/use-toast';

      import { useMutateAction } from '@uibakery/data';

      import { 
        ArrowLeft, 
        Key, 
        Clock, 
        Camera, 
        Mic, 
        Video, 
        Shield,
        Save,
        Eye,
        EyeOff,
        MapPin
      } from 'lucide-react';

      import { getAppSettings, saveAppSettings, type AppSettings } from
      '@/lib/storage';

      import { hashPin } from '@/lib/auth';

      import updateUserAction from '@/actions/updateUserSettings';

      import LocationHistoryViewer from './LocationHistoryViewer';


      interface SettingsPageProps {
        onBack: () => void;
        currentUser: any;
        onUserUpdated: () => void;
      }


      export default function SettingsPage({ onBack, currentUser, onUserUpdated
      }: SettingsPageProps) {
        const { toast } = useToast();
        const [updateUser] = useMutateAction(updateUserAction);
        
        const [settings, setSettings] = useState<AppSettings>(getAppSettings());
        const [newSecretCode, setNewSecretCode] = useState(settings.secretCode);
        const [newPin, setNewPin] = useState('');
        const [confirmPin, setPinConfirm] = useState('');
        const [showPin, setShowPin] = useState(false);
        const [isSaving, setIsSaving] = useState(false);

        const handleSaveSettings = async () => {
          setIsSaving(true);
          
          try {
            // Validate secret code
            if (!newSecretCode.trim()) {
              throw new Error('Secret code cannot be empty');
            }

            // Validate PIN if provided
            if (newPin || confirmPin) {
              if (newPin !== confirmPin) {
                throw new Error('PIN confirmation does not match');
              }
              if (newPin.length < 4) {
                throw new Error('PIN must be at least 4 digits');
              }
            }

            // Update local settings
            const updatedSettings = { ...settings, secretCode: newSecretCode.trim() };
            saveAppSettings(updatedSettings);
            setSettings(updatedSettings);

            // Update user in database if PIN changed
            if (newPin && currentUser) {
              const pinHash = await hashPin(newPin);
              await updateUser({
                userId: currentUser.id,
                key: 'pin_hash',
                value: pinHash
              });
              onUserUpdated();
            }

            toast({
              title: "Settings Saved",
              description: "Your settings have been updated successfully.",
            });

            // Clear PIN fields
            setNewPin('');
            setPinConfirm('');

          } catch (error: any) {
            toast({
              title: "Settings Error",
              description: error.message,
              variant: "destructive"
            });
          } finally {
            setIsSaving(false);
          }
        };

        const handleIntervalChange = (minutes: number) => {
          const updatedSettings = { ...settings, loggingInterval: minutes };
          setSettings(updatedSettings);
          saveAppSettings(updatedSettings);
        };

        const handleRecordingModeChange = (mode: 'audio' | 'video' | 'both') => {
          const updatedSettings = { ...settings, sosRecordingMode: mode };
          setSettings(updatedSettings);
          saveAppSettings(updatedSettings);
        };

        return (
          <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-blue-600 text-white shadow-lg">
              <div className="container mx-auto px-4 py-4">
                <div className="flex items-center space-x-4">
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={onBack}
                    className="text-white hover:bg-blue-700 p-2"
                  >
                    <ArrowLeft className="h-5 w-5" />
                  </Button>
                  <h1 className="text-2xl font-bold">Settings</h1>
                </div>
              </div>
            </div>

            <div className="container mx-auto px-4 py-6 max-w-2xl space-y-6">
              
              {/* Secret Code Settings */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Key className="h-5 w-5" />
                    Security Settings
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-2">
                    <Label htmlFor="secretCode">Secret Code</Label>
                    <Input
                      id="secretCode"
                      type="text"
                      value={newSecretCode}
                      onChange={(e) => setNewSecretCode(e.target.value)}
                      placeholder="Enter secret code (default: #5555)"
                    />
                    <p className="text-sm text-gray-600">
                      Enter this code in the shopping search bar to access safety features
                    </p>
                  </div>

                  <Separator />

                  <div className="grid gap-2">
                    <Label htmlFor="newPin">Set New PIN (Optional)</Label>
                    <div className="relative">
                      <Input
                        id="newPin"
                        type={showPin ? "text" : "password"}
                        value={newPin}
                        onChange={(e) => setNewPin(e.target.value.replace(/\D/g, '').slice(0, 10))}
                        placeholder="Enter new PIN (4+ digits)"
                        className="pr-12"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1"
                        onClick={() => setShowPin(!showPin)}
                      >
                        {showPin ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  {newPin && (
                    <div className="grid gap-2">
                      <Label htmlFor="confirmPin">Confirm PIN</Label>
                      <Input
                        id="confirmPin"
                        type={showPin ? "text" : "password"}
                        value={confirmPin}
                        onChange={(e) => setPinConfirm(e.target.value.replace(/\D/g, '').slice(0, 10))}
                        placeholder="Confirm your PIN"
                      />
                    </div>
                  )}

                  {currentUser?.pin_hash && (
                    <Alert>
                      <Shield className="h-4 w-4" />
                      <AlertDescription>
                        PIN protection is currently active. Enter a new PIN to change it.
                      </AlertDescription>
                    </Alert>
                  )}
                </CardContent>
              </Card>

              {/* Location Logging Settings */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Clock className="h-5 w-5" />
                    Auto Location Logging
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-3">
                    <Label>Logging Interval</Label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                      {[1, 3, 5, 10, 15, 30].map((minutes) => (
                        <Button
                          key={minutes}
                          variant={settings.loggingInterval === minutes ? "default" : "outline"}
                          onClick={() => handleIntervalChange(minutes)}
                          className="text-sm"
                        >
                          {minutes} min{minutes !== 1 ? 's' : ''}
                        </Button>
                      ))}
                    </div>
                    <p className="text-sm text-gray-600">
                      Current interval: <Badge variant="secondary">{settings.loggingInterval} minutes</Badge>
                    </p>
                  </div>
                </CardContent>
              </Card>

              {/* SOS Recording Settings */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Camera className="h-5 w-5" />
                    SOS Recording Options
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-3">
                    <Label>What to record when SOS button is pressed along with location?</Label>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                      <Button
                        variant={settings.sosRecordingMode === 'audio' ? "default" : "outline"}
                        onClick={() => handleRecordingModeChange('audio')}
                        className="flex items-center justify-center gap-2"
                      >
                        <Mic className="h-4 w-4" />
                        Audio Only
                      </Button>
                      <Button
                        variant={settings.sosRecordingMode === 'video' ? "default" : "outline"}
                        onClick={() => handleRecordingModeChange('video')}
                        className="flex items-center justify-center gap-2"
                      >
                        <Video className="h-4 w-4" />
                        Video Only
                      </Button>
                      <Button
                        variant={settings.sosRecordingMode === 'both' ? "default" : "outline"}
                        onClick={() => handleRecordingModeChange('both')}
                        className="flex items-center justify-center gap-2"
                      >
                        <Camera className="h-4 w-4" />
                        Both
                      </Button>
                    </div>
                    <p className="text-sm text-gray-600">
                      Current setting: <Badge variant="secondary">{settings.sosRecordingMode}</Badge>
                    </p>
                  </div>
                </CardContent>
              </Card>

              {/* Location History */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="h-5 w-5" />
                    Location History
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <LocationHistoryViewer currentUser={currentUser} />
                </CardContent>
              </Card>

              {/* Save Button */}
              <Button 
                onClick={handleSaveSettings}
                disabled={isSaving}
                className="w-full"
                size="lg"
              >
                <Save className="h-4 w-4 mr-2" />
                {isSaving ? 'Saving...' : 'Save Settings'}
              </Button>
            </div>
          </div>
        );
      }
    components/LocationHistoryViewer.tsx: >
      import React, { useState, useEffect } from 'react';

      import { Card, CardContent, CardHeader, CardTitle } from
      '@/components/ui/card';

      import { Badge } from '@/components/ui/badge';

      import { Button } from '@/components/ui/button';

      import { useLoadAction } from '@uibakery/data';

      import { MapPin, Clock, Trash2 } from 'lucide-react';

      import { encryptedStorage } from '@/lib/encryptedStorage';

      import { LocationData } from '@/lib/location';

      import getLocationHistoryAction from '@/actions/getLocationHistory';


      interface LocationHistoryViewerProps {
        currentUser: any;
      }


      export default function LocationHistoryViewer({ currentUser }:
      LocationHistoryViewerProps) {
        const [localHistory, setLocalHistory] = useState<LocationData[]>([]);
        const [databaseHistory, loadingDb] = useLoadAction(
          getLocationHistoryAction, 
          [], 
          { userId: currentUser?.id, limit: 10 }
        );

        useEffect(() => {
          loadLocalHistory();
        }, []);

        const loadLocalHistory = async () => {
          try {
            const history = await encryptedStorage.getItem<LocationData[]>('location_history') || [];
            setLocalHistory(history.slice(-5)); // Last 5 entries
          } catch (error) {
            console.error('Failed to load local history:', error);
          }
        };

        const clearLocalHistory = async () => {
          try {
            await encryptedStorage.removeItem('location_history');
            setLocalHistory([]);
          } catch (error) {
            console.error('Failed to clear local history:', error);
          }
        };

        const formatLocation = (lat: number, lng: number) => {
          return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        };

        const formatTimestamp = (timestamp: Date | string) => {
          const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;
          return date.toLocaleString();
        };

        const getAccuracyBadge = (accuracy: number) => {
          if (accuracy < 10) return <Badge variant="default">High</Badge>;
          if (accuracy < 50) return <Badge variant="secondary">Medium</Badge>;
          return <Badge variant="outline">Low</Badge>;
        };

        return (
          <div className="space-y-6">
            {/* Local History */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <MapPin className="h-5 w-5" />
                  Recent Local History (Last 5)
                </CardTitle>
                {localHistory.length > 0 && (
                  <Button variant="outline" size="sm" onClick={clearLocalHistory}>
                    <Trash2 className="h-4 w-4 mr-2" />
                    Clear
                  </Button>
                )}
              </CardHeader>
              <CardContent>
                {localHistory.length > 0 ? (
                  <div className="space-y-3">
                    {localHistory.map((location, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex-1">
                          <div className="font-mono text-sm">
                            {formatLocation(location.latitude, location.longitude)}
                          </div>
                          <div className="flex items-center gap-2 text-xs text-gray-600">
                            <Clock className="h-3 w-3" />
                            {formatTimestamp(location.timestamp)}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {getAccuracyBadge(location.accuracy)}
                          <Badge variant={location.source === 'gps' ? 'default' : 'secondary'}>
                            {location.source.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-4">No local history available</p>
                )}
              </CardContent>
            </Card>

            {/* Database History */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MapPin className="h-5 w-5" />
                  Database History (Last 10)
                </CardTitle>
              </CardHeader>
              <CardContent>
                {loadingDb ? (
                  <div className="text-center py-4">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
                    <p className="text-gray-500 text-sm">Loading database history...</p>
                  </div>
                ) : databaseHistory && databaseHistory.length > 0 ? (
                  <div className="space-y-3">
                    {databaseHistory.map((location: any, index: number) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                        <div className="flex-1">
                          <div className="font-mono text-sm">
                            {formatLocation(parseFloat(location.latitude), parseFloat(location.longitude))}
                          </div>
                          <div className="flex items-center gap-2 text-xs text-gray-600">
                            <Clock className="h-3 w-3" />
                            {formatTimestamp(location.timestamp)}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {location.accuracy && getAccuracyBadge(parseFloat(location.accuracy))}
                          <Badge variant={location.log_type === 'sos' ? 'destructive' : 'default'}>
                            {location.log_type?.toUpperCase() || 'LOG'}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-4">No database history available</p>
                )}
              </CardContent>
            </Card>
          </div>
        );
      }
  data: '{{ module.data }}'
  __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
    - xl
    - xs
  fileSystemCompiled: >
    <script src="assets/tailwind.js"></script>

    <link rel="stylesheet" href="assets/tailwind.css" />

    <style></style>


    <div class="root"></div>


    <script>
     window['UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id']=["react", "react-dom", "react-dom/client", "react/jsx-dev-runtime", "react-hook-form", "@radix-ui/react-toast", "lucide-react", "class-variance-authority", "@radix-ui/react-icons", "@radix-ui/react-slot", "clsx", "@radix-ui/react-dialog", "tailwind-merge", "@radix-ui/react-separator", "@radix-ui/react-label"];
    </script>

    <script id="UIB_script_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id.js">(()=>{var
    eo=Object.create;var he=Object.defineProperty;var
    to=Object.getOwnPropertyDescriptor;var oo=Object.getOwnPropertyNames;var
    ao=Object.getPrototypeOf,ro=Object.prototype.hasOwnProperty;var f=(o=>typeof
    require<"u"?require:typeof Proxy<"u"?new Proxy(o,{get:(e,t)=>(typeof
    require<"u"?require:e)[t]}):o)(function(o){if(typeof require<"u")return
    require.apply(this,arguments);throw Error('Dynamic require of "'+o+'" is not
    supported')});var w=(o,e)=>()=>(o&&(e=o(o=0)),e);var io=(o,e)=>{for(var t in
    e)he(o,t,{get:e[t],enumerable:!0})},st=(o,e,t,a)=>{if(e&&typeof
    e=="object"||typeof e=="function")for(let r of
    oo(e))!ro.call(o,r)&&r!==t&&he(o,r,{get:()=>e[r],enumerable:!(a=to(e,r))||a.enumerable});return
    o};var
    A=(o,e,t)=>(t=o!=null?eo(ao(o)):{},st(e||!o||!o.__esModule?he(t,"default",{value:o,enumerable:!0}):t,o)),so=o=>st(he({},"__esModule",{value:!0}),o);var
    p,m,d=w(()=>{p=window.UB_CUSTOM_REACT_APP_BUS["UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"].bus,m=p.customConsole});function
    lo(){return Be=(Be+1)%Number.MAX_SAFE_INTEGER,Be.toString()}function
    le(o){we=mo(we,o),be.forEach(e=>{e(we)})}function po({...o}){let
    e=lo(),t=r=>le({type:"UPDATE_TOAST",toast:{...r,id:e}}),a=()=>le({type:"DISMISS_TOAST",toastId:e});return
    le({type:"ADD_TOAST",toast:{...o,id:e,open:!0,onOpenChange:r=>{r||a()}}}),{id:e,dismiss:a,update:t}}function
    ee(){let[o,e]=xe.useState(we);return xe.useEffect(()=>(be.push(e),()=>{let
    t=be.indexOf(e);t>-1&&be.splice(t,1)}),[o]),{...o,toast:po,dismiss:t=>le({type:"DISMISS_TOAST",toastId:t})}}var
    xe,no,co,Be,Oe,nt,mo,be,we,me=w(()=>{"use
    client";d();xe=A(f("react")),no=1,co=1e6,Be=0;Oe=new
    Map,nt=o=>{if(Oe.has(o))return;let
    e=setTimeout(()=>{Oe.delete(o),le({type:"REMOVE_TOAST",toastId:o})},co);Oe.set(o,e)},mo=(o,e)=>{switch(e.type){case"ADD_TOAST":return{...o,toasts:[e.toast,...o.toasts].slice(0,no)};case"UPDATE_TOAST":return{...o,toasts:o.toasts.map(t=>t.id===e.toast.id?{...t,...e.toast}:t)};case"DISMISS_TOAST":{let{toastId:t}=e;return
    t?nt(t):o.toasts.forEach(a=>{nt(a.id)}),{...o,toasts:o.toasts.map(a=>a.id===t||t===void
    0?{...a,open:!1}:a)}}case"REMOVE_TOAST":return e.toastId===void
    0?{...o,toasts:[]}:{...o,toasts:o.toasts.filter(t=>t.id!==e.toastId)}}},be=[],we={toasts:[]}});function
    v(...o){return(0,dt.twMerge)((0,ct.clsx)(o))}var
    ct,dt,q=w(()=>{d();ct=f("clsx"),dt=f("tailwind-merge")});var
    U,L,lt,mt,pt,_e,uo,He,go,Ue,Ve,je,ut=w(()=>{d();U=A(f("react")),L=A(f("@radix-ui/react-toast")),lt=f("class-variance-authority");q();mt=f("@radix-ui/react-icons"),pt=L.Provider,_e=U.forwardRef(({className:o,...e},t)=>U.createElement(L.Viewport,{ref:t,className:v("fixed
    top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0
    sm:right-0 sm:top-auto sm:flex-col
    md:max-w-[420px]",o),...e}));_e.displayName=L.Viewport.displayName;uo=(0,lt.cva)("group
    pointer-events-auto relative flex w-full items-center justify-between
    space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg
    transition-all data-[swipe=cancel]:translate-x-0
    data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]
    data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)]
    data-[swipe=move]:transition-none data-[state=open]:animate-in
    data-[state=closed]:animate-out data-[swipe=end]:animate-out
    data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full
    data-[state=open]:slide-in-from-top-full
    data-[state=open]:sm:slide-in-from-bottom-full",{variants:{variant:{default:"border
    bg-background text-foreground",destructive:"destructive group
    border-destructive bg-destructive
    text-destructive-foreground"}},defaultVariants:{variant:"default"}}),He=U.forwardRef(({className:o,variant:e,...t},a)=>U.createElement(L.Root,{ref:a,className:v(uo({variant:e}),o),...t}));He.displayName=L.Root.displayName;go=U.forwardRef(({className:o,...e},t)=>U.createElement(L.Action,{ref:t,className:v("inline-flex
    h-8 shrink-0 items-center justify-center rounded-md border bg-transparent
    px-3 text-sm font-medium transition-colors hover:bg-secondary
    focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none
    disabled:opacity-50 group-[.destructive]:border-muted/40
    group-[.destructive]:hover:border-destructive/30
    group-[.destructive]:hover:bg-destructive
    group-[.destructive]:hover:text-destructive-foreground
    group-[.destructive]:focus:ring-destructive",o),...e}));go.displayName=L.Action.displayName;Ue=U.forwardRef(({className:o,...e},t)=>U.createElement(L.Close,{ref:t,className:v("absolute
    right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity
    hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1
    group-hover:opacity-100 group-[.destructive]:text-red-300
    group-[.destructive]:hover:text-red-50
    group-[.destructive]:focus:ring-red-400
    group-[.destructive]:focus:ring-offset-red-600",o),"toast-close":"",...e},U.createElement(mt.Cross2Icon,{className:"h-4
    w-4"})));Ue.displayName=L.Close.displayName;Ve=U.forwardRef(({className:o,...e},t)=>U.createElement(L.Title,{ref:t,className:v("text-sm
    font-semibold
    [&+div]:text-xs",o),...e}));Ve.displayName=L.Title.displayName;je=U.forwardRef(({className:o,...e},t)=>U.createElement(L.Description,{ref:t,className:v("text-sm
    opacity-90",o),...e}));je.displayName=L.Description.displayName});function
    gt(){let{toasts:o}=ee();return
    React.createElement(pt,null,o.map(function({id:e,title:t,description:a,action:r,...i}){return
    React.createElement(He,{key:e,...i},React.createElement("div",{className:"grid
    gap-1"},t&&React.createElement(Ve,null,t),a&&React.createElement(je,null,a)),r,React.createElement(Ue,null))}),React.createElement(_e,null))}var
    ft=w(()=>{d();me();ut()});var
    Wo,Ne,ie,$o,Qo,Go,W,$=w(()=>{d();Wo=p.useData,Ne=p.useLoadAction,ie=p.useMutateAction,$o=p.triggerEvent,Qo=p.ActionSettings,Go=p.ActionConfig,W=p.action});var
    Te,Z,Se=w(()=>{d();Te=A(f("react"));q();Z=Te.forwardRef(({className:o,type:e,...t},a)=>Te.createElement("input",{type:e,className:v("flex
    h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base
    shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm
    file:font-medium file:text-foreground placeholder:text-muted-foreground
    focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring
    disabled:cursor-not-allowed disabled:opacity-50
    md:text-sm",o),ref:a,...t}));Z.displayName="Input"});var
    Ce,yt,vt,fo,T,se=w(()=>{d();Ce=A(f("react")),yt=f("@radix-ui/react-slot"),vt=f("class-variance-authority");q();fo=(0,vt.cva)("inline-flex
    items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm
    font-medium transition-colors focus-visible:outline-none
    focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none
    disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4
    [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary
    text-primary-foreground shadow
    hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground
    shadow-sm hover:bg-destructive/90",outline:"border border-input
    bg-background shadow-sm hover:bg-accent
    hover:text-accent-foreground",secondary:"bg-secondary
    text-secondary-foreground shadow-sm
    hover:bg-secondary/80",ghost:"hover:bg-accent
    hover:text-accent-foreground",link:"text-primary underline-offset-4
    hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3
    text-xs",lg:"h-10 rounded-md px-8",icon:"h-9
    w-9"}},defaultVariants:{variant:"default",size:"default"}}),T=Ce.forwardRef(({className:o,variant:e,size:t,asChild:a=!1,...r},i)=>Ce.createElement(a?yt.Slot:"button",{className:v(fo({variant:e,size:t,className:o})),ref:i,...r}));T.displayName="Button"});var
    j,I,F,K,yo,M,vo,pe=w(()=>{d();j=A(f("react"));q();I=j.forwardRef(({className:o,...e},t)=>j.createElement("div",{ref:t,className:v("rounded-lg
    border bg-card text-card-foreground
    shadow-sm",o),...e}));I.displayName="Card";F=j.forwardRef(({className:o,...e},t)=>j.createElement("div",{ref:t,className:v("flex
    flex-col space-y-1.5
    p-6",o),...e}));F.displayName="CardHeader";K=j.forwardRef(({className:o,...e},t)=>j.createElement("h3",{ref:t,className:v("text-2xl
    font-semibold leading-none
    tracking-tight",o),...e}));K.displayName="CardTitle";yo=j.forwardRef(({className:o,...e},t)=>j.createElement("p",{ref:t,className:v("text-sm
    text-muted-foreground",o),...e}));yo.displayName="CardDescription";M=j.forwardRef(({className:o,...e},t)=>j.createElement("div",{ref:t,className:v("p-6
    pt-0",o),...e}));M.displayName="CardContent";vo=j.forwardRef(({className:o,...e},t)=>j.createElement("div",{ref:t,className:v("flex
    items-center p-6 pt-0",o),...e}));vo.displayName="CardFooter"});var
    Fe,Pe,ht=w(()=>{d();Fe=class{watchId=null;isTracking=!1;lastKnownLocation=null;async
    getCurrentLocation(){return new
    Promise((e,t)=>{if(!navigator.geolocation){t(new Error("Geolocation is not
    supported"));return}let
    a={enableHighAccuracy:!0,timeout:15e3,maximumAge:3e4};navigator.geolocation.getCurrentPosition(r=>{let
    i={latitude:r.coords.latitude,longitude:r.coords.longitude,accuracy:r.coords.accuracy,altitude:r.coords.altitude||void
    0,altitudeAccuracy:r.coords.altitudeAccuracy||void
    0,heading:r.coords.heading||void 0,speed:r.coords.speed||void
    0,timestamp:new
    Date(r.timestamp),source:r.coords.accuracy<100?"gps":"network"};this.lastKnownLocation=i,e(i)},r=>{this.lastKnownLocation&&Date.now()-this.lastKnownLocation.timestamp.getTime()<3e5?e(this.lastKnownLocation):this.tryLowAccuracyLocation().then(e).catch(t)},a)})}async
    tryLowAccuracyLocation(){return new Promise((e,t)=>{let
    a={enableHighAccuracy:!1,timeout:1e4,maximumAge:6e4};navigator.geolocation.getCurrentPosition(r=>{let
    i={latitude:r.coords.latitude,longitude:r.coords.longitude,accuracy:r.coords.accuracy,altitude:r.coords.altitude||void
    0,altitudeAccuracy:r.coords.altitudeAccuracy||void
    0,heading:r.coords.heading||void 0,speed:r.coords.speed||void
    0,timestamp:new
    Date(r.timestamp),source:"network"};this.lastKnownLocation=i,e(i)},t,a)})}startBackgroundTracking(e,t){this.isTracking&&this.stopBackgroundTracking(),this.isTracking=!0;let
    a={enableHighAccuracy:!0,timeout:3e4,maximumAge:6e4};this.watchId=navigator.geolocation.watchPosition(i=>{let
    s={latitude:i.coords.latitude,longitude:i.coords.longitude,accuracy:i.coords.accuracy,altitude:i.coords.altitude||void
    0,altitudeAccuracy:i.coords.altitudeAccuracy||void
    0,heading:i.coords.heading||void 0,speed:i.coords.speed||void
    0,timestamp:new
    Date(i.timestamp),source:i.coords.accuracy<100?"gps":"network"};this.lastKnownLocation=s,t(s)},i=>{m.error("Background
    location tracking error:",i)},a);let
    r=setInterval(async()=>{if(!this.isTracking){clearInterval(r);return}try{let
    i=await this.getCurrentLocation();t(i)}catch(i){m.error("Periodic location
    update
    failed:",i)}},e*60*1e3)}stopBackgroundTracking(){this.isTracking=!1,this.watchId!==null&&(navigator.geolocation.clearWatch(this.watchId),this.watchId=null)}getLastKnownLocation(){return
    this.lastKnownLocation}isCurrentlyTracking(){return this.isTracking}},Pe=new
    Fe});var Ke,ne,ze,bt,De=w(()=>{d();Ke=class{encryptionKey=null;async
    getEncryptionKey(){if(this.encryptionKey)return this.encryptionKey;let
    e=localStorage.getItem("quickmart_encryption_key");if(e)try{let a=new
    Uint8Array(JSON.parse(e));return this.encryptionKey=await
    crypto.subtle.importKey("raw",a,{name:"AES-GCM"},!1,["encrypt","decrypt"]),this.encryptionKey}catch(a){m.error("Failed
    to load encryption key:",a)}this.encryptionKey=await
    crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]);let
    t=await crypto.subtle.exportKey("raw",this.encryptionKey);return
    localStorage.setItem("quickmart_encryption_key",JSON.stringify(Array.from(new
    Uint8Array(t)))),this.encryptionKey}async encrypt(e){let t=await
    this.getEncryptionKey(),a=new TextEncoder,r=crypto.getRandomValues(new
    Uint8Array(12)),i=await
    crypto.subtle.encrypt({name:"AES-GCM",iv:r},t,a.encode(e)),s=new
    Uint8Array(r.length+i.byteLength);return s.set(r),s.set(new
    Uint8Array(i),r.length),btoa(String.fromCharCode(...s))}async decrypt(e){let
    t=await this.getEncryptionKey(),a=new
    Uint8Array(Array.from(atob(e),y=>y.charCodeAt(0))),r=a.slice(0,12),i=a.slice(12),s=await
    crypto.subtle.decrypt({name:"AES-GCM",iv:r},t,i);return new
    TextDecoder().decode(s)}async setItem(e,t){try{let
    a=JSON.stringify(t),r=await
    this.encrypt(a);localStorage.setItem(`quickmart_encrypted_${e}`,r)}catch(a){throw
    m.error("Failed to store encrypted data:",a),a}}async getItem(e){try{let
    t=localStorage.getItem(`quickmart_encrypted_${e}`);if(!t)return null;let
    a=await this.decrypt(t);return JSON.parse(a)}catch(t){return m.error("Failed
    to retrieve encrypted data:",t),null}}async
    removeItem(e){localStorage.removeItem(`quickmart_encrypted_${e}`)}async
    clear(){Object.keys(localStorage).filter(t=>t.startsWith("quickmart_encrypted_")).forEach(t=>localStorage.removeItem(t))}},ne=new
    Ke,ze=class{dbName="QuickMartMedia";dbVersion=1;db=null;async init(){return
    new Promise((e,t)=>{let
    a=indexedDB.open(this.dbName,this.dbVersion);a.onerror=()=>t(a.error),a.onsuccess=()=>{this.db=a.result,e()},a.onupgradeneeded=r=>{let
    i=r.target.result;if(!i.objectStoreNames.contains("media")){let
    s=i.createObjectStore("media",{keyPath:"id"});s.createIndex("type","type"),s.createIndex("timestamp","timestamp")}}})}async
    storeMedia(e){return this.db||await this.init(),new Promise((t,a)=>{let
    s=this.db.transaction(["media"],"readwrite").objectStore("media").put(e);s.onsuccess=()=>t(),s.onerror=()=>a(s.error)})}async
    getMedia(e){return this.db||await this.init(),new Promise((t,a)=>{let
    s=this.db.transaction(["media"],"readonly").objectStore("media").get(e);s.onsuccess=()=>t(s.result||null),s.onerror=()=>a(s.error)})}async
    getAllMedia(e){return this.db||await this.init(),new Promise((t,a)=>{let
    i=this.db.transaction(["media"],"readonly").objectStore("media"),s=e?i.index("type").getAll(e):i.getAll();s.onsuccess=()=>t(s.result),s.onerror=()=>a(s.error)})}async
    deleteMedia(e){return this.db||await this.init(),new Promise((t,a)=>{let
    s=this.db.transaction(["media"],"readwrite").objectStore("media").delete(e);s.onsuccess=()=>t(),s.onerror=()=>a(s.error)})}async
    clearOldMedia(e){this.db||await this.init();let t=new
    Date(Date.now()-e*24*60*60*1e3);return new Promise((a,r)=>{let
    y=this.db.transaction(["media"],"readwrite").objectStore("media").index("timestamp").openCursor(IDBKeyRange.upperBound(t));y.onsuccess=h=>{let
    l=h.target.result;l?(l.delete(),l.continue()):a()},y.onerror=()=>r(y.error)})}},bt=new
    ze});function Q(){try{let
    o=localStorage.getItem("quickmart_settings");if(o)return{...wt,...JSON.parse(o)}}catch(o){m.error("Failed
    to load settings:",o)}return wt}function Ae(o){try{let
    t={...Q(),...o};localStorage.setItem("quickmart_settings",JSON.stringify(t))}catch(e){m.error("Failed
    to save settings:",e)}}async function We(){return await
    Pe.getCurrentLocation()}async function xt(){try{let o=await
    navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:1280,height:720}}),e=document.createElement("video");return
    e.srcObject=o,e.play(),new
    Promise((t,a)=>{e.addEventListener("loadedmetadata",()=>{let
    r=document.createElement("canvas");r.width=e.videoWidth,r.height=e.videoHeight;let
    i=r.getContext("2d");if(!i){o.getTracks().forEach(s=>s.stop()),a(new
    Error("Could not get canvas
    context"));return}i.drawImage(e,0,0),o.getTracks().forEach(s=>s.stop()),r.toBlob(s=>{t(s)},"image/jpeg",.8)})})}catch(o){return
    m.error("Photo capture failed:",o),null}}async function Nt(o=10){try{let
    e=await
    navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:640,height:480},audio:!0}),t=new
    MediaRecorder(e,{mimeType:"video/webm;codecs=vp8,opus"}),a=[];return new
    Promise((r,i)=>{t.ondataavailable=s=>{s.data.size>0&&a.push(s.data)},t.onstop=()=>{e.getTracks().forEach(x=>x.stop());let
    s=new
    Blob(a,{type:"video/webm"});r(s)},t.onerror=s=>{e.getTracks().forEach(x=>x.stop()),i(s)},t.start(),setTimeout(()=>{t.state==="recording"&&t.stop()},o*1e3)})}catch(e){return
    m.error("Video capture failed:",e),null}}async function Tt(o=10){try{let
    e=await navigator.mediaDevices.getUserMedia({audio:!0}),t=new
    MediaRecorder(e,{mimeType:"audio/webm;codecs=opus"}),a=[];return new
    Promise((r,i)=>{t.ondataavailable=s=>{s.data.size>0&&a.push(s.data)},t.onstop=()=>{e.getTracks().forEach(x=>x.stop());let
    s=new
    Blob(a,{type:"audio/webm"});r(s)},t.onerror=s=>{e.getTracks().forEach(x=>x.stop()),i(s)},t.start(),setTimeout(()=>{t.state==="recording"&&t.stop()},o*1e3)})}catch(e){return
    m.error("Audio capture failed:",e),null}}var
    wt,qe,ga,ue=w(()=>{d();ht();De();wt={secretCode:"#5555",pinSet:!1,backgroundLogging:!1,loggingInterval:5,autoDeleteDays:7,autoOpenWhatsApp:!0,sosRecordingMode:"both"};qe=class{isActive=!1;async
    startLogging(e,t,a){if(this.isActive)return;this.isActive=!0;let r=await
    ne.getItem("location_history")||[];Pe.startBackgroundTracking(t,async
    i=>{try{r.push(i),r.length>1e3&&r.splice(0,r.length-1e3),await
    ne.setItem("location_history",r),a(i)}catch(s){m.error("Failed to save
    location
    locally:",s)}})}stopLogging(){this.isActive=!1,Pe.stopBackgroundTracking()}isLogging(){return
    this.isActive}},ga=new qe});function
    $e({onSecretCodeEntered:o,onOpenSettings:e}){let[t,a]=(0,g.useState)(""),[r,i]=(0,g.useState)(""),s=()=>{let
    y=Q();if(t.trim()===y.secretCode){a(""),o();return}if(t.trim()){let
    l=`https://www.amazon.in/s?k=${encodeURIComponent(t.trim())}`;i(l)}};return
    g.default.createElement("div",{className:"min-h-screen bg-gradient-to-b
    from-blue-50
    to-white"},g.default.createElement("div",{className:"bg-blue-600 text-white
    shadow-lg"},g.default.createElement("div",{className:"container mx-auto px-4
    py-4"},g.default.createElement("div",{className:"flex items-center
    justify-between"},g.default.createElement("div",{className:"flex
    items-center
    space-x-2"},g.default.createElement(ce.ShoppingBag,{className:"h-8
    w-8"}),g.default.createElement("h1",{className:"text-2xl
    font-bold"},"QuickMart")),g.default.createElement("div",{className:"flex
    items-center space-x-4"},g.default.createElement("div",{className:"text-sm
    opacity-90"},"Your Shopping
    Companion"),g.default.createElement(T,{variant:"ghost",size:"sm",onClick:e,className:"text-white
    hover:bg-blue-700"},g.default.createElement(ce.Settings,{className:"h-4
    w-4"})))))),g.default.createElement("div",{className:"container mx-auto px-4
    py-6"},g.default.createElement(I,{className:"shadow-md"},g.default.createElement(M,{className:"p-6"},g.default.createElement("div",{className:"flex
    flex-col sm:flex-row
    gap-3"},g.default.createElement("div",{className:"flex-1"},g.default.createElement(Z,{type:"text",placeholder:"Search
    for products, brands,
    categories...",value:t,onChange:y=>a(y.target.value),onKeyPress:y=>{y.key==="Enter"&&s()},className:"text-lg
    py-3"})),g.default.createElement(T,{onClick:s,className:"bg-blue-600
    hover:bg-blue-700 px-8
    py-3",size:"lg"},g.default.createElement(ce.Search,{className:"h-5 w-5
    mr-2"}),"Search")))),g.default.createElement("div",{className:"grid
    grid-cols-2 md:grid-cols-4 gap-4
    mt-8"},[{name:"Electronics",emoji:"\u{1F4F1}"},{name:"Fashion",emoji:"\u{1F457}"},{name:"Home
    &
    Garden",emoji:"\u{1F3E0}"},{name:"Books",emoji:"\u{1F4DA}"},{name:"Sports",emoji:"\u26BD"},{name:"Beauty",emoji:"\u{1F484}"},{name:"Groceries",emoji:"\u{1F6D2}"},{name:"Toys",emoji:"\u{1F9F8}"}].map(y=>g.default.createElement(I,{key:y.name,className:"cursor-pointer
    hover:shadow-md transition-shadow",onClick:()=>{a(y.name);let
    h=encodeURIComponent(y.name);i(`https://www.amazon.in/s?k=${h}`)}},g.default.createElement(M,{className:"p-4
    text-center"},g.default.createElement("div",{className:"text-3xl
    mb-2"},y.emoji),g.default.createElement("div",{className:"font-medium
    text-sm"},y.name)))))),r&&g.default.createElement("div",{className:"container
    mx-auto px-4
    pb-6"},g.default.createElement(I,{className:"shadow-md"},g.default.createElement(M,{className:"p-0"},g.default.createElement("iframe",{src:r,className:"w-full
    h-96 border-0 rounded-lg",title:"Shopping Results",sandbox:"allow-scripts
    allow-same-origin
    allow-forms"})))),!r&&g.default.createElement("div",{className:"container
    mx-auto px-4"},g.default.createElement("h2",{className:"text-xl font-bold
    mb-4"},"Popular Deals"),g.default.createElement("div",{className:"grid
    grid-cols-1 md:grid-cols-3 gap-4"},[{title:"Electronics Sale",desc:"Up to
    50% off smartphones",image:"\u{1F4F1}"},{title:"Fashion Week",desc:"Trending
    styles for everyone",image:"\u{1F454}"},{title:"Home
    Essentials",desc:"Everything for your
    home",image:"\u{1F3E0}"}].map((y,h)=>g.default.createElement(I,{key:h,className:"cursor-pointer
    hover:shadow-md
    transition-shadow"},g.default.createElement(M,{className:"p-4"},g.default.createElement("div",{className:"text-4xl
    mb-3
    text-center"},y.image),g.default.createElement("h3",{className:"font-semibold
    text-lg
    mb-2"},y.title),g.default.createElement("p",{className:"text-gray-600
    text-sm"},y.desc)))))))}var
    g,ce,St=w(()=>{d();g=A(f("react"));Se();se();pe();ce=f("lucide-react");ue()});function
    z({className:o,variant:e,...t}){return
    Ct.createElement("div",{className:v(ho({variant:e}),o),...t})}var
    Ct,Pt,ho,Le=w(()=>{d();Ct=A(f("react")),Pt=f("class-variance-authority");q();ho=(0,Pt.cva)("inline-flex
    items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold
    transition-colors focus:outline-none focus:ring-2 focus:ring-ring
    focus:ring-offset-2",{variants:{variant:{default:"border-transparent
    bg-primary text-primary-foreground shadow
    hover:bg-primary/80",secondary:"border-transparent bg-secondary
    text-secondary-foreground
    hover:bg-secondary/80",destructive:"border-transparent bg-destructive
    text-destructive-foreground shadow
    hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}})});var
    Ee,Qe,ge,Ge=w(()=>{d();Ee=A(f("react")),Qe=A(f("@radix-ui/react-separator"));q();ge=Ee.forwardRef(({className:o,orientation:e="horizontal",decorative:t=!0,...a},r)=>Ee.createElement(Qe.Root,{ref:r,decorative:t,orientation:e,className:v("shrink-0
    bg-border",e==="horizontal"?"h-[1px] w-full":"h-full
    w-[1px]",o),...a}));ge.displayName=Qe.Root.displayName});function
    bo(){return W("saveLocationLog","SQL",{})}var
    Dt,At=w(()=>{d();$();Dt=bo});function
    Je({onQuickExit:o,onOpenSettings:e,currentUser:t}){let{toast:a}=ee(),[r]=ie(Dt),[i,s]=(0,c.useState)(null),[x,y]=(0,c.useState)(!1),[h,l]=(0,c.useState)(!1);(0,c.useEffect)(()=>{C()},[]);let
    C=async()=>{y(!0);try{let b=await We();s(b)}catch(b){m.error("Location
    error:",b),a({title:"Location Error",description:"Could not get current
    location. Please enable location
    services.",variant:"destructive"})}finally{y(!1)}},G=async()=>{a({title:"SOS
    Activated",description:"Gathering location and preparing emergency
    data..."});try{let b=await We(),Y=b.latitude,P=b.longitude,N=new
    Date().toISOString(),H=Q(),Xt=`\u{1F198} SOS! I need help. My location:
    https://maps.google.com/?q=${Y},${P} (Time: ${N}) Accuracy:
    \xB1${Math.round(b.accuracy)}m`,ve=[];(H.sosRecordingMode==="audio"||H.sosRecordingMode==="both")&&ve.push(Tt(10).then(k=>k?{type:"audio",blob:k}:null)),(H.sosRecordingMode==="video"||H.sosRecordingMode==="both")&&ve.push(Nt(10).then(k=>k?{type:"video",blob:k}:null)),ve.push(xt().then(k=>k?{type:"photo",blob:k}:null));try{t&&await
    r({userId:t.id,latitude:Y,longitude:P,accuracy:b.accuracy,timestamp:b.timestamp.toISOString(),logType:"sos"})}catch(k){m.warn("Database
    location save failed, continuing with local storage:",k)}let
    Me=[];try{Me=(await
    Promise.allSettled(ve)).filter(re=>re.status==="fulfilled"&&re.value).map(re=>re.value)}catch(k){m.warn("Media
    capture failed, continuing with text-only SOS:",k)}for(let k of
    Me)if(k&&k.blob){let
    re={id:`sos_${Date.now()}_${k.type}`,type:k.type,blob:k.blob,timestamp:new
    Date,metadata:{sosEvent:!0,location:b}};try{await
    bt.storeMedia(re)}catch(Rt){m.warn("Local media storage failed:",Rt)}}await
    J(Xt),a({title:"SOS Complete",description:`Emergency alert sent with
    location and ${Me.length} media files captured.`})}catch(b){m.error("SOS
    error:",b);try{let P=`sms:?body=${encodeURIComponent("\u{1F198} SOS!
    Emergency at current location. Please call for
    help.")}`;window.open(P,"_blank"),a({title:"SOS Fallback",description:"Basic
    emergency SMS sent. Advanced features
    failed.",variant:"destructive"})}catch{a({title:"SOS
    Failed",description:"All emergency methods failed. Please manually call for
    help.",variant:"destructive"})}}},J=async b=>{if(Q().autoOpenWhatsApp){let
    P=`https://wa.me/?text=${encodeURIComponent(b)}`,N=window.open(P,"_blank");if(await
    new Promise(H=>setTimeout(H,2e3)),!N||N.closed){let
    H=`sms:?body=${encodeURIComponent(b)}`;window.open(H,"_blank")}}else{let
    P=`sms:?body=${encodeURIComponent(b)}`;window.open(P,"_blank")}setTimeout(()=>{let
    N=`mailto:?subject=${encodeURIComponent("\u{1F198} EMERGENCY SOS
    ALERT")}&body=${encodeURIComponent(b)}`;window.open(N,"_blank")},1e3)},X=b=>{window.open(`tel:${b}`,"_self")},V=b=>`${b.latitude.toFixed(6)},
    ${b.longitude.toFixed(6)}`,R=b=>b.toLocaleString();return
    c.default.createElement("div",{className:"min-h-screen bg-gradient-to-b
    from-red-50
    to-orange-50"},c.default.createElement("div",{className:"bg-red-600
    text-white shadow-lg"},c.default.createElement("div",{className:"container
    mx-auto px-4 py-4"},c.default.createElement("div",{className:"flex
    items-center
    justify-between"},c.default.createElement("div",{className:"flex
    items-center
    space-x-2"},c.default.createElement(E.ShieldAlert,{className:"h-8
    w-8"}),c.default.createElement("h1",{className:"text-2xl font-bold"},"Safety
    Dashboard")),c.default.createElement(T,{variant:"secondary",onClick:o,className:"bg-white
    text-red-600
    hover:bg-gray-100"},c.default.createElement(E.ExternalLink,{className:"h-4
    w-4 mr-2"}),"Quick
    Exit")))),c.default.createElement("div",{className:"container mx-auto px-4
    py-6 space-y-6"},c.default.createElement(I,{className:"border-red-200
    shadow-lg"},c.default.createElement(M,{className:"p-8
    text-center"},c.default.createElement(T,{onClick:G,size:"lg",className:"bg-red-600
    hover:bg-red-700 text-white h-20 w-full max-w-md text-xl
    font-bold"},c.default.createElement(E.ShieldAlert,{className:"h-8 w-8
    mr-3"}),"SOS - EMERGENCY"),c.default.createElement("p",{className:"text-sm
    text-gray-600 mt-4"},"Press to send emergency location and alerts to your
    contacts"))),c.default.createElement(I,null,c.default.createElement(F,null,c.default.createElement(K,{className:"flex
    items-center gap-2"},c.default.createElement(E.MapPin,{className:"h-5
    w-5"}),"Current
    Location")),c.default.createElement(M,{className:"space-y-4"},i?c.default.createElement("div",{className:"space-y-2"},c.default.createElement("div",{className:"flex
    items-center
    justify-between"},c.default.createElement("span",{className:"font-medium"},"Coordinates:"),c.default.createElement("span",{className:"font-mono
    text-sm"},V(i))),c.default.createElement("div",{className:"flex items-center
    justify-between"},c.default.createElement("span",{className:"font-medium"},"Accuracy:"),c.default.createElement(z,{variant:"secondary"},"\xB1",Math.round(i.accuracy),"m")),c.default.createElement("div",{className:"flex
    items-center
    justify-between"},c.default.createElement("span",{className:"font-medium"},"Last
    Update:"),c.default.createElement("span",{className:"text-sm
    text-gray-600"},R(i.timestamp)))):c.default.createElement("p",{className:"text-gray-500"},"Location
    not
    available"),c.default.createElement(T,{onClick:C,disabled:x,variant:"outline",className:"w-full"},c.default.createElement(E.Navigation,{className:"h-4
    w-4 mr-2"}),x?"Getting Location...":"Update
    Location"))),c.default.createElement(I,null,c.default.createElement(F,null,c.default.createElement(K,{className:"flex
    items-center gap-2"},c.default.createElement(E.Phone,{className:"h-5
    w-5"}),"Emergency
    Helplines")),c.default.createElement(M,null,c.default.createElement("div",{className:"grid
    grid-cols-1 md:grid-cols-3
    gap-3"},c.default.createElement(T,{onClick:()=>X("112"),variant:"outline",className:"justify-start
    border-red-200
    hover:bg-red-50"},c.default.createElement(E.Phone,{className:"h-4 w-4
    mr-2"}),"112 -
    Emergency"),c.default.createElement(T,{onClick:()=>X("1091"),variant:"outline",className:"justify-start
    border-red-200
    hover:bg-red-50"},c.default.createElement(E.Phone,{className:"h-4 w-4
    mr-2"}),"1091 - Women
    Helpline"),c.default.createElement(T,{onClick:()=>X("1098"),variant:"outline",className:"justify-start
    border-red-200
    hover:bg-red-50"},c.default.createElement(E.Phone,{className:"h-4 w-4
    mr-2"}),"1098 - Child
    Helpline")))),c.default.createElement(I,null,c.default.createElement(F,null,c.default.createElement(K,{className:"flex
    items-center gap-2"},c.default.createElement(E.Clock,{className:"h-5
    w-5"}),"Background Location
    Logging")),c.default.createElement(M,{className:"space-y-4"},c.default.createElement("div",{className:"flex
    items-center
    justify-between"},c.default.createElement("span",null,"Status:"),c.default.createElement(z,{variant:h?"default":"secondary"},h?"Active":"Inactive")),c.default.createElement("div",{className:"flex
    gap-2"},c.default.createElement(T,{onClick:()=>{l(!0),a({description:"Background
    logging
    started"})},disabled:h,size:"sm",className:"flex-1"},c.default.createElement(E.Zap,{className:"h-4
    w-4 mr-2"}),"Start
    Logging"),c.default.createElement(T,{onClick:()=>{l(!1),a({description:"Background
    logging
    stopped"})},disabled:!h,variant:"outline",size:"sm",className:"flex-1"},"Stop
    Logging")))),c.default.createElement(ge,null),c.default.createElement(T,{onClick:e,variant:"outline",className:"w-full"},c.default.createElement(E.Settings,{className:"h-4
    w-4 mr-2"}),"Settings")))}var
    c,E,Lt=w(()=>{d();c=A(f("react"));se();pe();Le();Ge();me();E=f("lucide-react");ue();De();$();At()});var
    _,B,Et,kt,wo,It,Ye,Ze,xo,Xe,Re,Mt=w(()=>{"use
    client";d();_=A(f("react")),B=A(f("@radix-ui/react-dialog"));q();Et=f("@radix-ui/react-icons"),kt=B.Root,wo=B.Portal,It=_.forwardRef(({className:o,...e},t)=>_.createElement(B.Overlay,{ref:t,className:v("fixed
    inset-0 z-50 bg-black/80  data-[state=open]:animate-in
    data-[state=closed]:animate-out data-[state=closed]:fade-out-0
    data-[state=open]:fade-in-0",o),...e}));It.displayName=B.Overlay.displayName;Ye=_.forwardRef(({className:o,children:e,...t},a)=>_.createElement(wo,null,_.createElement(It,null),_.createElement(B.Content,{ref:a,className:v("fixed
    left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%]
    translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200
    data-[state=open]:animate-in data-[state=closed]:animate-out
    data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0
    data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
    data-[state=closed]:slide-out-to-left-1/2
    data-[state=closed]:slide-out-to-top-[48%]
    data-[state=open]:slide-in-from-left-1/2
    data-[state=open]:slide-in-from-top-[48%]
    sm:rounded-lg",o),...t},e,_.createElement(B.Close,{className:"absolute
    right-4 top-4 rounded-sm opacity-70 ring-offset-background
    transition-opacity hover:opacity-100 focus:outline-none focus:ring-2
    focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none
    data-[state=open]:bg-accent
    data-[state=open]:text-muted-foreground"},_.createElement(Et.Cross2Icon,{className:"h-4
    w-4"}),_.createElement("span",{className:"sr-only"},"Close")))));Ye.displayName=B.Content.displayName;Ze=({className:o,...e})=>_.createElement("div",{className:v("flex
    flex-col space-y-1.5 text-center
    sm:text-left",o),...e});Ze.displayName="DialogHeader";xo=({className:o,...e})=>_.createElement("div",{className:v("flex
    flex-col-reverse sm:flex-row sm:justify-end
    sm:space-x-2",o),...e});xo.displayName="DialogFooter";Xe=_.forwardRef(({className:o,...e},t)=>_.createElement(B.Title,{ref:t,className:v("text-lg
    font-semibold leading-none
    tracking-tight",o),...e}));Xe.displayName=B.Title.displayName;Re=_.forwardRef(({className:o,...e},t)=>_.createElement(B.Description,{ref:t,className:v("text-sm
    text-muted-foreground",o),...e}));Re.displayName=B.Description.displayName});var
    te,Bt,No,fe,To,ye,et=w(()=>{d();te=A(f("react")),Bt=f("class-variance-authority");q();No=(0,Bt.cva)("relative
    w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px]
    [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground
    [&>svg~*]:pl-7",{variants:{variant:{default:"bg-background
    text-foreground",destructive:"border-destructive/50 text-destructive
    dark:border-destructive
    [&>svg]:text-destructive"}},defaultVariants:{variant:"default"}}),fe=te.forwardRef(({className:o,variant:e,...t},a)=>te.createElement("div",{ref:a,role:"alert",className:v(No({variant:e}),o),...t}));fe.displayName="Alert";To=te.forwardRef(({className:o,...e},t)=>te.createElement("h5",{ref:t,className:v("mb-1
    font-medium leading-none
    tracking-tight",o),...e}));To.displayName="AlertTitle";ye=te.forwardRef(({className:o,...e},t)=>te.createElement("div",{ref:t,className:v("text-sm
    [&_p]:leading-relaxed",o),...e}));ye.displayName="AlertDescription"});async
    function tt(o){let t=new TextEncoder().encode(o),a=await
    crypto.subtle.digest("SHA-256",t);return Array.from(new
    Uint8Array(a)).map(i=>i.toString(16).padStart(2,"0")).join("")}async
    function Ot(o,e){return await tt(o)===e}function _t(){let
    o=localStorage.getItem("quickmart_device_id");return
    o||(o="device_"+Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),localStorage.setItem("quickmart_device_id",o)),o}var
    ke=w(()=>{d()});function
    ot({isOpen:o,onAuthenticated:e,userPinHash:t,title:a="Authentication
    Required",description:r="Please enter your PIN to
    continue"}){let[i,s]=(0,D.useState)(""),[x,y]=(0,D.useState)(!1),[h,l]=(0,D.useState)(""),[C,G]=(0,D.useState)(!1);return
    D.default.createElement(kt,{open:o,onOpenChange:()=>{}},D.default.createElement(Ye,{className:"sm:max-w-md"},D.default.createElement(Ze,{className:"text-center"},D.default.createElement(Xe,{className:"flex
    items-center justify-center
    gap-2"},D.default.createElement(de.Lock,{className:"h-5
    w-5"}),a),D.default.createElement(Re,null,r)),D.default.createElement("form",{onSubmit:async
    V=>{if(V.preventDefault(),!!i.trim()){G(!0),l("");try{await
    Ot(i.trim(),t)?(s(""),e()):l("Invalid PIN. Please try
    again.")}catch{l("Authentication failed. Please try
    again.")}finally{G(!1)}}},className:"space-y-4"},D.default.createElement("div",{className:"relative"},D.default.createElement(Z,{type:x?"text":"password",placeholder:"Enter
    PIN",value:i,onChange:V=>s(V.target.value),onKeyPress:V=>{!/[0-9]/.test(V.key)&&!["Backspace","Delete","Tab","Escape","Enter"].includes(V.key)&&V.preventDefault()},maxLength:10,className:"pr-12
    text-lg text-center
    tracking-wider",autoFocus:!0,disabled:C}),D.default.createElement(T,{type:"button",variant:"ghost",size:"sm",className:"absolute
    right-2 top-1/2 transform -translate-y-1/2 h-auto
    p-1",onClick:()=>y(!x),disabled:C},x?D.default.createElement(de.EyeOff,{className:"h-4
    w-4"}):D.default.createElement(de.Eye,{className:"h-4
    w-4"}))),h&&D.default.createElement(fe,{variant:"destructive"},D.default.createElement(ye,null,h)),D.default.createElement(T,{type:"submit",className:"w-full",disabled:!i.trim()||C},C?"Verifying...":"Unlock"))))}var
    D,de,Ht=w(()=>{d();D=A(f("react"));Mt();se();Se();et();de=f("lucide-react");ke()});var
    Ie,at,Ut,So,ae,Vt=w(()=>{d();Ie=A(f("react")),at=A(f("@radix-ui/react-label")),Ut=f("class-variance-authority");q();So=(0,Ut.cva)("text-sm
    font-medium leading-none peer-disabled:cursor-not-allowed
    peer-disabled:opacity-70"),ae=Ie.forwardRef(({className:o,...e},t)=>Ie.createElement(at.Root,{ref:t,className:v(So(),o),...e}));ae.displayName=at.Root.displayName});function
    Co(){return W("updateUserSettings","SQL",{})}var
    jt,Ft=w(()=>{d();$();jt=Co});function Po(){return
    W("getLocationHistory","SQL",{})}var Kt,zt=w(()=>{d();$();Kt=Po});function
    rt({currentUser:o}){let[e,t]=(0,u.useState)([]),[a,r]=Ne(Kt,[],{userId:o?.id,limit:10});(0,u.useEffect)(()=>{i()},[]);let
    i=async()=>{try{let l=await
    ne.getItem("location_history")||[];t(l.slice(-5))}catch(l){m.error("Failed
    to load local history:",l)}},s=async()=>{try{await
    ne.removeItem("location_history"),t([])}catch(l){m.error("Failed to clear
    local history:",l)}},x=(l,C)=>`${l.toFixed(6)},
    ${C.toFixed(6)}`,y=l=>(typeof l=="string"?new
    Date(l):l).toLocaleString(),h=l=>l<10?u.default.createElement(z,{variant:"default"},"High"):l<50?u.default.createElement(z,{variant:"secondary"},"Medium"):u.default.createElement(z,{variant:"outline"},"Low");return
    u.default.createElement("div",{className:"space-y-6"},u.default.createElement(I,null,u.default.createElement(F,{className:"flex
    flex-row items-center
    justify-between"},u.default.createElement(K,{className:"flex items-center
    gap-2"},u.default.createElement(oe.MapPin,{className:"h-5 w-5"}),"Recent
    Local History (Last
    5)"),e.length>0&&u.default.createElement(T,{variant:"outline",size:"sm",onClick:s},u.default.createElement(oe.Trash2,{className:"h-4
    w-4
    mr-2"}),"Clear")),u.default.createElement(M,null,e.length>0?u.default.createElement("div",{className:"space-y-3"},e.map((l,C)=>u.default.createElement("div",{key:C,className:"flex
    items-center justify-between p-3 bg-gray-50
    rounded-lg"},u.default.createElement("div",{className:"flex-1"},u.default.createElement("div",{className:"font-mono
    text-sm"},x(l.latitude,l.longitude)),u.default.createElement("div",{className:"flex
    items-center gap-2 text-xs
    text-gray-600"},u.default.createElement(oe.Clock,{className:"h-3
    w-3"}),y(l.timestamp))),u.default.createElement("div",{className:"flex
    items-center
    gap-2"},h(l.accuracy),u.default.createElement(z,{variant:l.source==="gps"?"default":"secondary"},l.source.toUpperCase()))))):u.default.createElement("p",{className:"text-gray-500
    text-center py-4"},"No local history
    available"))),u.default.createElement(I,null,u.default.createElement(F,null,u.default.createElement(K,{className:"flex
    items-center gap-2"},u.default.createElement(oe.MapPin,{className:"h-5
    w-5"}),"Database History (Last
    10)")),u.default.createElement(M,null,r?u.default.createElement("div",{className:"text-center
    py-4"},u.default.createElement("div",{className:"animate-spin rounded-full
    h-6 w-6 border-b-2 border-blue-600 mx-auto
    mb-2"}),u.default.createElement("p",{className:"text-gray-500
    text-sm"},"Loading database
    history...")):a&&a.length>0?u.default.createElement("div",{className:"space-y-3"},a.map((l,C)=>u.default.createElement("div",{key:C,className:"flex
    items-center justify-between p-3 bg-blue-50
    rounded-lg"},u.default.createElement("div",{className:"flex-1"},u.default.createElement("div",{className:"font-mono
    text-sm"},x(parseFloat(l.latitude),parseFloat(l.longitude))),u.default.createElement("div",{className:"flex
    items-center gap-2 text-xs
    text-gray-600"},u.default.createElement(oe.Clock,{className:"h-3
    w-3"}),y(l.timestamp))),u.default.createElement("div",{className:"flex
    items-center
    gap-2"},l.accuracy&&h(parseFloat(l.accuracy)),u.default.createElement(z,{variant:l.log_type==="sos"?"destructive":"default"},l.log_type?.toUpperCase()||"LOG"))))):u.default.createElement("p",{className:"text-gray-500
    text-center py-4"},"No database history available"))))}var
    u,oe,qt=w(()=>{d();u=A(f("react"));pe();Le();se();$();oe=f("lucide-react");De();zt()});function
    it({onBack:o,currentUser:e,onUserUpdated:t}){let{toast:a}=ee(),[r]=ie(jt),[i,s]=(0,n.useState)(Q()),[x,y]=(0,n.useState)(i.secretCode),[h,l]=(0,n.useState)(""),[C,G]=(0,n.useState)(""),[J,X]=(0,n.useState)(!1),[V,R]=(0,n.useState)(!1),b=async()=>{R(!0);try{if(!x.trim())throw
    new Error("Secret code cannot be empty");if(h||C){if(h!==C)throw new
    Error("PIN confirmation does not match");if(h.length<4)throw new Error("PIN
    must be at least 4 digits")}let
    N={...i,secretCode:x.trim()};if(Ae(N),s(N),h&&e){let H=await tt(h);await
    r({userId:e.id,key:"pin_hash",value:H}),t()}a({title:"Settings
    Saved",description:"Your settings have been updated
    successfully."}),l(""),G("")}catch(N){a({title:"Settings
    Error",description:N.message,variant:"destructive"})}finally{R(!1)}},Y=N=>{let
    H={...i,loggingInterval:N};s(H),Ae(H)},P=N=>{let
    H={...i,sosRecordingMode:N};s(H),Ae(H)};return
    n.default.createElement("div",{className:"min-h-screen
    bg-gray-50"},n.default.createElement("div",{className:"bg-blue-600
    text-white shadow-lg"},n.default.createElement("div",{className:"container
    mx-auto px-4 py-4"},n.default.createElement("div",{className:"flex
    items-center
    space-x-4"},n.default.createElement(T,{variant:"ghost",size:"sm",onClick:o,className:"text-white
    hover:bg-blue-700 p-2"},n.default.createElement(S.ArrowLeft,{className:"h-5
    w-5"})),n.default.createElement("h1",{className:"text-2xl
    font-bold"},"Settings")))),n.default.createElement("div",{className:"container
    mx-auto px-4 py-6 max-w-2xl
    space-y-6"},n.default.createElement(I,null,n.default.createElement(F,null,n.default.createElement(K,{className:"flex
    items-center gap-2"},n.default.createElement(S.Key,{className:"h-5
    w-5"}),"Security
    Settings")),n.default.createElement(M,{className:"space-y-4"},n.default.createElement("div",{className:"grid
    gap-2"},n.default.createElement(ae,{htmlFor:"secretCode"},"Secret
    Code"),n.default.createElement(Z,{id:"secretCode",type:"text",value:x,onChange:N=>y(N.target.value),placeholder:"Enter
    secret code (default:
    #5555)"}),n.default.createElement("p",{className:"text-sm
    text-gray-600"},"Enter this code in the shopping search bar to access safety
    features")),n.default.createElement(ge,null),n.default.createElement("div",{className:"grid
    gap-2"},n.default.createElement(ae,{htmlFor:"newPin"},"Set New PIN
    (Optional)"),n.default.createElement("div",{className:"relative"},n.default.createElement(Z,{id:"newPin",type:J?"text":"password",value:h,onChange:N=>l(N.target.value.replace(/\D/g,"").slice(0,10)),placeholder:"Enter
    new PIN (4+
    digits)",className:"pr-12"}),n.default.createElement(T,{type:"button",variant:"ghost",size:"sm",className:"absolute
    right-2 top-1/2 transform -translate-y-1/2 h-auto
    p-1",onClick:()=>X(!J)},J?n.default.createElement(S.EyeOff,{className:"h-4
    w-4"}):n.default.createElement(S.Eye,{className:"h-4
    w-4"})))),h&&n.default.createElement("div",{className:"grid
    gap-2"},n.default.createElement(ae,{htmlFor:"confirmPin"},"Confirm
    PIN"),n.default.createElement(Z,{id:"confirmPin",type:J?"text":"password",value:C,onChange:N=>G(N.target.value.replace(/\D/g,"").slice(0,10)),placeholder:"Confirm
    your
    PIN"})),e?.pin_hash&&n.default.createElement(fe,null,n.default.createElement(S.Shield,{className:"h-4
    w-4"}),n.default.createElement(ye,null,"PIN protection is currently active.
    Enter a new PIN to change
    it.")))),n.default.createElement(I,null,n.default.createElement(F,null,n.default.createElement(K,{className:"flex
    items-center gap-2"},n.default.createElement(S.Clock,{className:"h-5
    w-5"}),"Auto Location
    Logging")),n.default.createElement(M,{className:"space-y-4"},n.default.createElement("div",{className:"grid
    gap-3"},n.default.createElement(ae,null,"Logging
    Interval"),n.default.createElement("div",{className:"grid grid-cols-2
    md:grid-cols-4
    gap-2"},[1,3,5,10,15,30].map(N=>n.default.createElement(T,{key:N,variant:i.loggingInterval===N?"default":"outline",onClick:()=>Y(N),className:"text-sm"},N,"
    min",N!==1?"s":""))),n.default.createElement("p",{className:"text-sm
    text-gray-600"},"Current interval:
    ",n.default.createElement(z,{variant:"secondary"},i.loggingInterval,"
    minutes"))))),n.default.createElement(I,null,n.default.createElement(F,null,n.default.createElement(K,{className:"flex
    items-center gap-2"},n.default.createElement(S.Camera,{className:"h-5
    w-5"}),"SOS Recording
    Options")),n.default.createElement(M,{className:"space-y-4"},n.default.createElement("div",{className:"grid
    gap-3"},n.default.createElement(ae,null,"What to record when SOS button is
    pressed along with
    location?"),n.default.createElement("div",{className:"grid grid-cols-1
    md:grid-cols-3
    gap-2"},n.default.createElement(T,{variant:i.sosRecordingMode==="audio"?"default":"outline",onClick:()=>P("audio"),className:"flex
    items-center justify-center
    gap-2"},n.default.createElement(S.Mic,{className:"h-4 w-4"}),"Audio
    Only"),n.default.createElement(T,{variant:i.sosRecordingMode==="video"?"default":"outline",onClick:()=>P("video"),className:"flex
    items-center justify-center
    gap-2"},n.default.createElement(S.Video,{className:"h-4 w-4"}),"Video
    Only"),n.default.createElement(T,{variant:i.sosRecordingMode==="both"?"default":"outline",onClick:()=>P("both"),className:"flex
    items-center justify-center
    gap-2"},n.default.createElement(S.Camera,{className:"h-4
    w-4"}),"Both")),n.default.createElement("p",{className:"text-sm
    text-gray-600"},"Current setting:
    ",n.default.createElement(z,{variant:"secondary"},i.sosRecordingMode))))),n.default.createElement(I,null,n.default.createElement(F,null,n.default.createElement(K,{className:"flex
    items-center gap-2"},n.default.createElement(S.MapPin,{className:"h-5
    w-5"}),"Location
    History")),n.default.createElement(M,null,n.default.createElement(rt,{currentUser:e}))),n.default.createElement(T,{onClick:b,disabled:V,className:"w-full",size:"lg"},n.default.createElement(S.Save,{className:"h-4
    w-4 mr-2"}),V?"Saving...":"Save Settings")))}var
    n,S,Wt=w(()=>{d();n=A(f("react"));se();pe();Se();Vt();Le();Ge();et();me();$();S=f("lucide-react");ue();ke();Ft();qt()});function
    Do(){return W("getUserByDeviceId","SQL",{})}var
    $t,Qt=w(()=>{d();$();$t=Do});function Ao(){return
    W("createUser","SQL",{})}var Gt,Jt=w(()=>{d();$();Gt=Ao});var
    Yt={};io(Yt,{default:()=>Eo});function
    Lo(){let{toast:o}=ee(),[e,t]=(0,O.useState)("shopping"),[a,r]=(0,O.useState)(!1),[i]=(0,O.useState)(()=>_t()),[s,x]=(0,O.useState)(null),[y,h,l,C]=Ne($t,[],{deviceId:i}),[G]=ie(Gt);(0,O.useEffect)(()=>{y&&y.length>0?x(y[0]):!h&&!l&&J()},[y,h,l]);let
    J=async()=>{try{let P=Q();await
    G({deviceId:i,secretCode:P.secretCode,pinHash:null}),await
    C(),o({title:"Welcome to QuickMart",description:"Your shopping app is ready
    to use!"})}catch(P){m.error("Failed to create user:",P),o({title:"Setup
    Error",description:"Failed to initialize app. Please try
    again.",variant:"destructive"})}},X=()=>{s&&(s.pin_hash?r(!0):t("safety"))},V=()=>{localStorage.getItem("auth_context")==="settings"?Y():(r(!1),t("safety"))},R=()=>{t("shopping");let
    P=window.open("https://www.google.com","_blank");o({description:"Returned to
    shopping
    mode"})},b=()=>{s?.pin_hash?(localStorage.setItem("auth_context","settings"),r(!0)):t("settings")},Y=()=>{r(!1);let
    P=localStorage.getItem("auth_context");t(P==="settings"?"settings":"safety"),localStorage.removeItem("auth_context")};return
    h?O.default.createElement("div",{className:"min-h-screen flex items-center
    justify-center"},O.default.createElement("div",{className:"text-center"},O.default.createElement("div",{className:"animate-spin
    rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto
    mb-4"}),O.default.createElement("p",{className:"text-gray-600"},"Loading
    QuickMart..."))):O.default.createElement(O.default.Fragment,null,e==="shopping"&&O.default.createElement($e,{onSecretCodeEntered:X,onOpenSettings:b}),e==="safety"&&O.default.createElement(Je,{onQuickExit:R,onOpenSettings:b,currentUser:s}),e==="settings"&&O.default.createElement(it,{onBack:()=>t(e==="settings"&&localStorage.getItem("auth_context")==="settings"?"safety":"shopping"),currentUser:s,onUserUpdated:C}),a&&s?.pin_hash&&O.default.createElement(ot,{isOpen:a,onAuthenticated:V,userPinHash:s.pin_hash,title:"Security
    Check",description:"Please enter your PIN to access safety
    features"}),O.default.createElement(gt,null))}var
    O,Eo,Zt=w(()=>{d();O=A(f("react"));me();ft();$();St();Lt();Ht();Wt();Qt();Jt();ke();ue();Eo=Lo});d();function
    ko(){let o=f("react"),e=(Zt(),so(Yt)).default;window.React=o;let
    t=f("react-dom/client").createRoot,a=t(p.container.querySelector(".root"));class
    r extends o.Component{state={hasError:!1};static
    getDerivedStateFromError(s){return{hasError:!0}}componentDidCatch(s,x){p.handleError(s,s?.name==="ModuleLoadingError")}render(){return
    this.state.hasError?o.createElement("div",{class:"module-error"},"Something
    went
    wrong."):this.props.children}}a.render(o.createElement(r,null,o.createElement(e,null)))}Zone.current.fork({name:"angular-bootstrap",onHandleError(o,e,t,a){return
    p.handleError(a,a?.name==="ModuleLoadingError"),p.onModulesLoaded(),!1}}).runGuarded(()=>{loadModulesSequentially(window["UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"]).then(()=>{delete
    window["UIB_MODULES_TO_LOAD_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id"],p.onModulesLoaded(),ko()})});})();


    //# sourceURL=UIB_script_UIB_PROD_BUILD_COMPONENT_ID_MOCK.id.js</script>
actions: {}
slots:
  - id: moduleContainerSlot
    name: content
    children: []
